{"file_contents":{"design_guidelines.md":{"content":"# Solar Panel CRM Design Guidelines - Enterprise Edition\n\n## Design Approach\n**Premium System-Based Approach**: Enhanced Material Design system elevated for enterprise-grade B2B applications. Focuses on sophisticated visual hierarchy, premium aesthetics, and trust-building through refined design details for solar sales professionals.\n\n## Core Design Elements\n\n### Color Palette\n**Light Mode:**\n- Primary: 210 100% 30% (Deep professional navy)\n- Secondary: 45 95% 48% (Premium solar gold)\n- Success: 145 80% 32% (Rich forest green)\n- Warning: 35 95% 45% (Sophisticated amber)\n- Error: 2 88% 52% (Refined crimson)\n- Background: 210 20% 98% (Subtle cool tint)\n- Surface: 0 0% 100%\n- Neutral: 210 15% 85% (Cool gray borders)\n\n**Dark Mode:**\n- Primary: 210 100% 70%\n- Secondary: 45 95% 68%\n- Success: 145 80% 52%\n- Background: 220 40% 8% (Deep charcoal)\n- Surface: 220 35% 12% (Elevated charcoal)\n- Neutral: 220 20% 25%\n\n### Typography - Enterprise Hierarchy\n- **Primary Font**: Inter (Google Fonts CDN)\n- **Display**: Bold (700) for major headings and hero text\n- **Headings**: Semibold (600) with increased letter-spacing\n- **Subheadings**: Medium (500) for section titles\n- **Body**: Regular (400) with optimized line-height 1.6\n- **Caption**: Medium (500) for labels, small (14px)\n- **Data**: Tabular numbers, monospace for metrics\n\n### Layout System - Professional Spacing\n**Tailwind Units**: 1, 2, 3, 4, 6, 8, 12, 16, 20, 24, 32\n- **Micro**: p-1, gap-2 (tight data tables)\n- **Standard**: p-4, gap-4 (cards, forms)\n- **Comfortable**: p-6, gap-6 (sections)\n- **Generous**: p-8, gap-8 (major sections)\n- **Executive**: p-12, p-16 (hero areas, dashboards)\n\n### Sophisticated Visual Elements\n\n**Elevation System:**\n- **Surface**: Subtle shadow with 0.5px borders\n- **Cards**: Soft shadow (0 2px 8px rgba(0,0,0,0.06))\n- **Modals**: Deep shadow (0 10px 40px rgba(0,0,0,0.15))\n- **Navigation**: Crisp 1px borders with backdrop blur\n\n**Professional Borders:**\n- **Default**: 1px solid using neutral colors\n- **Interactive**: 2px for focus states\n- **Dividers**: 0.5px opacity borders for subtle separation\n\n### Premium Component Library\n\n**Executive Dashboard:**\n- Multi-tier information architecture\n- Revenue visualization with sophisticated charts\n- KPI cards with subtle gradients and shadows\n- Activity feeds with refined typography hierarchy\n\n**Advanced Data Management:**\n- Enhanced tables with alternating row tints\n- Advanced filtering with chip-based selections\n- Sortable columns with elegant hover states\n- Bulk operations with confirmation overlays\n\n**Professional Forms:**\n- Floating labels with smooth animations\n- Progressive disclosure for complex forms\n- Auto-complete with sophisticated dropdowns\n- Validation with inline messaging\n\n**Premium Navigation:**\n- Expandable sidebar with contextual sections\n- Breadcrumb with hover states and separators\n- Tab navigation with smooth underline indicators\n- Global search with intelligent suggestions\n\n### Micro-Interactions & Polish\n\n**Smooth Transitions:**\n- 200ms ease-out for standard interactions\n- 300ms ease-in-out for layout changes\n- Stagger animations for list items (50ms delays)\n- Loading states with skeleton screens\n\n**Hover Enhancements:**\n- Use existing hover-elevate and active-elevate-2 utilities for consistency\n- Subtle elevation increases on cards via hover-elevate\n- Button interactions use shadcn default states (no custom hover colors)\n- Border intensity changes handled by CSS variable system\n- Icon transformations using CSS transforms\n\n### Trust-Building Elements\n\n**Status Indicators:**\n- Color-coded pipeline stages with icons\n- Progress bars with gradient fills\n- Achievement badges with metallic effects\n- Health scores with sophisticated visualizations\n\n**Professional Iconography:**\n- Lucide React icons for consistency (aligns with current stack)\n- 24px standard size with 20px compact\n- Consistent stroke width and corner radius\n- Contextual color application using CSS variables\n\n### Enterprise-Grade Features\n- **Advanced Analytics**: Multi-dimensional charts with interactive tooltips\n- **Communication Hub**: Integrated email/SMS with thread management\n- **Campaign Management**: Visual campaign builders with drag-drop\n- **Territory Management**: Geographic visualizations with performance overlays\n- **Reporting Suite**: Executive dashboards with export capabilities\n\n### Responsive Behavior\n- **Desktop**: Full feature set with comfortable spacing\n- **Tablet**: Condensed navigation with maintained functionality  \n- **Mobile**: Progressive disclosure with gesture-friendly interactions\n\n## Implementation Token Mapping\n\n### CSS Variable Updates for Enhanced Design\nTo implement these design guidelines, update the following CSS variables in `client/src/index.css`:\n\n**Light Mode Enhanced Palette:**\n```css\n:root {\n  --primary: 210 100% 30%;           /* Deep professional navy */\n  --secondary: 45 95% 48%;           /* Premium solar gold */\n  --accent: 45 95% 93%;              /* Light gold backgrounds */\n  --accent-foreground: 45 95% 25%;   /* Dark gold text */\n  --background: 210 20% 98%;         /* Subtle cool tint */\n  --foreground: 210 15% 15%;         /* Darker text for contrast */\n  --muted: 210 15% 92%;              /* Enhanced neutral */\n  --border: 210 15% 85%;             /* Cool gray borders */\n  --card: 0 0% 100%;                 /* Keep pure white */\n  --card-border: 210 15% 90%;        /* Subtle card borders */\n}\n```\n\n**Dark Mode Enhanced Palette:**\n```css\n.dark {\n  --primary: 210 100% 70%;           /* Brighter navy for dark */\n  --secondary: 45 95% 68%;           /* Brighter gold for dark */\n  --background: 220 40% 8%;          /* Deep charcoal */\n  --foreground: 210 10% 92%;         /* Light text */\n  --card: 220 35% 12%;               /* Elevated charcoal */\n  --border: 220 20% 25%;             /* Neutral borders */\n}\n```\n\n### Implementation Phases\n1. **Phase 1**: Update CSS variables and verify contrast on key components\n2. **Phase 2**: Apply enhanced spacing and typography to main layout\n3. **Phase 3**: Add professional polish to forms and data displays\n4. **Phase 4**: Implement micro-interactions and final touches\n\n### Component-Specific Guidelines\n- **Buttons**: Use default shadcn variants with hover-elevate utilities\n- **Cards**: Apply card background with subtle borders and hover-elevate\n- **Forms**: Maintain shadcn Input styling with enhanced focus states\n- **Tables**: Use alternating row backgrounds with muted color\n- **Navigation**: Apply sidebar styling with professional hierarchy\n\nThis enhanced system creates an enterprise-grade experience that builds trust through sophisticated visual design while maintaining the efficiency required for solar sales operations.","size_bytes":6726},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Solar Panel CRM System\n\n## Overview\n\nThis is a comprehensive CRM (Customer Relationship Management) web application specifically designed for medium-sized solar panel sales companies. The system provides a complete sales pipeline management solution with lead tracking, marketing campaign automation, communication management, and business analytics.\n\nThe application follows a modern full-stack architecture with a React frontend using TypeScript and Tailwind CSS, an Express.js backend with PostgreSQL database, and includes features for email/SMS integration, role-based access control, and comprehensive reporting capabilities.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development practices\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent, professional design\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **UI Components**: Radix UI primitives with custom styling for accessibility and consistency\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework for REST API endpoints\n- **Language**: TypeScript for type safety across the entire stack\n- **Database ORM**: Drizzle ORM for type-safe database operations and schema management\n- **Authentication**: JWT-based authentication with bcrypt for password hashing\n- **API Design**: RESTful endpoints with consistent error handling and validation using Zod schemas\n\n### Database Design\n- **Database**: PostgreSQL with connection pooling via Neon serverless\n- **Schema Management**: Drizzle Kit for migrations and schema versioning\n- **Core Entities**:\n  - Users (admin, sales, marketing, support roles)\n  - Leads (with status pipeline: new → contacted → proposal → closed)\n  - Campaigns (email marketing with tracking metrics)\n  - Communications (emails, calls, meetings, notes)\n- **Data Relationships**: Proper foreign key constraints and relational design for data integrity\n\n### Component Architecture\n- **Design System**: Modified Material Design optimized for B2B productivity\n- **Color Palette**: Professional blue/gold theme with light/dark mode support\n- **Layout System**: Consistent spacing using Tailwind's 8-point grid system\n- **Navigation**: Fixed sidebar with collapsible sections and breadcrumb navigation\n- **Data Display**: Advanced tables with sorting/filtering, pipeline visualization cards, and performance dashboards\n\n### Business Logic\n- **Pipeline Management**: Lead progression through defined sales stages with probability tracking\n- **Campaign Analytics**: Open rates, click-through rates, and conversion tracking\n- **Communication Hub**: Centralized activity timeline with template management\n- **Reporting**: KPI dashboards with exportable reports (CSV, PDF)\n\n## External Dependencies\n\n### Core Infrastructure\n- **Database**: Neon PostgreSQL serverless database for scalable data storage\n- **Email Service**: SendGrid API integration for transactional emails and marketing campaigns\n- **SMS Service**: Twilio API integration for SMS communications and notifications\n\n### Development Tools\n- **Package Manager**: npm with package-lock.json for dependency management\n- **Code Quality**: ESLint and Prettier configuration for consistent code formatting\n- **Type Checking**: TypeScript strict mode for compile-time error detection\n- **Build Process**: Vite with esbuild for fast compilation and bundling\n\n### UI/UX Libraries\n- **Component Library**: Radix UI for accessible, unstyled component primitives\n- **Styling**: Tailwind CSS with PostCSS for utility-first styling approach\n- **Icons**: Lucide React for consistent iconography\n- **Form Handling**: React Hook Form with Zod validation for robust form management\n- **Data Fetching**: TanStack Query for efficient server state management and caching\n\n### Authentication & Security\n- **Password Hashing**: bcryptjs for secure password storage\n- **Session Management**: Connect-pg-simple for PostgreSQL-backed session storage\n- **Input Validation**: Zod schemas for runtime type checking and data validation\n\n### Utility Libraries\n- **Date Handling**: date-fns for date manipulation and formatting\n- **Class Management**: clsx and class-variance-authority for conditional styling\n- **UUID Generation**: Built-in PostgreSQL UUID generation for unique identifiers","size_bytes":4587},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertLeadSchema, insertCampaignSchema, insertCommunicationSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Leads routes\n  app.get(\"/api/leads\", async (req, res) => {\n    try {\n      const { status, assignedTo, search } = req.query;\n      const leads = await storage.getLeads({\n        status: status as string,\n        assignedTo: assignedTo as string,\n        search: search as string,\n      });\n      res.json(leads);\n    } catch (error) {\n      console.error(\"Error fetching leads:\", error);\n      res.status(500).json({ error: \"Failed to fetch leads\" });\n    }\n  });\n\n  app.get(\"/api/leads/:id\", async (req, res) => {\n    try {\n      const lead = await storage.getLead(req.params.id);\n      if (!lead) {\n        return res.status(404).json({ error: \"Lead not found\" });\n      }\n      res.json(lead);\n    } catch (error) {\n      console.error(\"Error fetching lead:\", error);\n      res.status(500).json({ error: \"Failed to fetch lead\" });\n    }\n  });\n\n  app.post(\"/api/leads\", async (req, res) => {\n    try {\n      const validatedData = insertLeadSchema.parse(req.body);\n      const lead = await storage.createLead(validatedData);\n      res.status(201).json(lead);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid lead data\", details: error.errors });\n      }\n      console.error(\"Error creating lead:\", error);\n      res.status(500).json({ error: \"Failed to create lead\" });\n    }\n  });\n\n  app.put(\"/api/leads/:id\", async (req, res) => {\n    try {\n      const validatedData = insertLeadSchema.partial().parse(req.body);\n      const lead = await storage.updateLead(req.params.id, validatedData);\n      res.json(lead);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid lead data\", details: error.errors });\n      }\n      console.error(\"Error updating lead:\", error);\n      res.status(500).json({ error: \"Failed to update lead\" });\n    }\n  });\n\n  app.delete(\"/api/leads/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteLead(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: \"Lead not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting lead:\", error);\n      res.status(500).json({ error: \"Failed to delete lead\" });\n    }\n  });\n\n  app.get(\"/api/leads-by-status\", async (req, res) => {\n    try {\n      const stats = await storage.getLeadsByStatus();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching lead stats:\", error);\n      res.status(500).json({ error: \"Failed to fetch lead statistics\" });\n    }\n  });\n\n  // Campaigns routes\n  app.get(\"/api/campaigns\", async (req, res) => {\n    try {\n      const { status, createdBy } = req.query;\n      const campaigns = await storage.getCampaigns({\n        status: status as string,\n        createdBy: createdBy as string,\n      });\n      res.json(campaigns);\n    } catch (error) {\n      console.error(\"Error fetching campaigns:\", error);\n      res.status(500).json({ error: \"Failed to fetch campaigns\" });\n    }\n  });\n\n  app.get(\"/api/campaigns/:id\", async (req, res) => {\n    try {\n      const campaign = await storage.getCampaign(req.params.id);\n      if (!campaign) {\n        return res.status(404).json({ error: \"Campaign not found\" });\n      }\n      res.json(campaign);\n    } catch (error) {\n      console.error(\"Error fetching campaign:\", error);\n      res.status(500).json({ error: \"Failed to fetch campaign\" });\n    }\n  });\n\n  app.post(\"/api/campaigns\", async (req, res) => {\n    try {\n      const validatedData = insertCampaignSchema.parse(req.body);\n      const campaign = await storage.createCampaign(validatedData);\n      res.status(201).json(campaign);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid campaign data\", details: error.errors });\n      }\n      console.error(\"Error creating campaign:\", error);\n      res.status(500).json({ error: \"Failed to create campaign\" });\n    }\n  });\n\n  app.put(\"/api/campaigns/:id\", async (req, res) => {\n    try {\n      const validatedData = insertCampaignSchema.partial().parse(req.body);\n      const campaign = await storage.updateCampaign(req.params.id, validatedData);\n      res.json(campaign);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid campaign data\", details: error.errors });\n      }\n      console.error(\"Error updating campaign:\", error);\n      res.status(500).json({ error: \"Failed to update campaign\" });\n    }\n  });\n\n  app.delete(\"/api/campaigns/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteCampaign(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: \"Campaign not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting campaign:\", error);\n      res.status(500).json({ error: \"Failed to delete campaign\" });\n    }\n  });\n\n  // Communications routes\n  app.get(\"/api/communications\", async (req, res) => {\n    try {\n      const { leadId } = req.query;\n      const communications = await storage.getCommunications(leadId as string);\n      res.json(communications);\n    } catch (error) {\n      console.error(\"Error fetching communications:\", error);\n      res.status(500).json({ error: \"Failed to fetch communications\" });\n    }\n  });\n\n  app.post(\"/api/communications\", async (req, res) => {\n    try {\n      const validatedData = insertCommunicationSchema.parse(req.body);\n      const communication = await storage.createCommunication(validatedData);\n      res.status(201).json(communication);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid communication data\", details: error.errors });\n      }\n      console.error(\"Error creating communication:\", error);\n      res.status(500).json({ error: \"Failed to create communication\" });\n    }\n  });\n\n  app.put(\"/api/communications/:id\", async (req, res) => {\n    try {\n      const validatedData = insertCommunicationSchema.partial().parse(req.body);\n      const communication = await storage.updateCommunication(req.params.id, validatedData);\n      res.json(communication);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid communication data\", details: error.errors });\n      }\n      console.error(\"Error updating communication:\", error);\n      res.status(500).json({ error: \"Failed to update communication\" });\n    }\n  });\n\n  app.delete(\"/api/communications/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteCommunication(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: \"Communication not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting communication:\", error);\n      res.status(500).json({ error: \"Failed to delete communication\" });\n    }\n  });\n\n  // Dashboard stats route\n  app.get(\"/api/dashboard-stats\", async (req, res) => {\n    try {\n      const leadsByStatus = await storage.getLeadsByStatus();\n      const allLeads = await storage.getLeads();\n      const allCampaigns = await storage.getCampaigns();\n      const allCommunications = await storage.getCommunications();\n\n      const totalLeads = allLeads.length;\n      const pipelineValue = allLeads.reduce((sum, lead) => {\n        return sum + (parseFloat(lead.estimatedValue || '0') * (lead.probability || 0) / 100);\n      }, 0);\n      \n      const closedWonLeads = allLeads.filter(lead => lead.status === 'closed_won').length;\n      const conversionRate = totalLeads > 0 ? (closedWonLeads / totalLeads * 100) : 0;\n\n      const stats = {\n        totalLeads,\n        pipelineValue: `$${(pipelineValue / 1000000).toFixed(1)}M`,\n        conversionRate: `${conversionRate.toFixed(1)}%`,\n        closedDeals: closedWonLeads,\n        leadsByStatus,\n        activeCampaigns: allCampaigns.filter(c => c.status === 'active').length,\n        totalCommunications: allCommunications.length,\n      };\n\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ error: \"Failed to fetch dashboard statistics\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":8683},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { users, leads, campaigns, communications } from \"@shared/schema\";\nimport bcrypt from \"bcryptjs\";\n\nasync function seed() {\n  console.log(\"Starting database seed...\");\n\n  try {\n    // Create users\n    const hashedPassword = await bcrypt.hash(\"password123\", 10);\n    \n    const createdUsers = await db.insert(users).values([\n      {\n        username: \"admin\",\n        email: \"admin@solarpanel.com\",\n        password: hashedPassword,\n        firstName: \"Admin\",\n        lastName: \"User\", \n        role: \"admin\",\n      },\n      {\n        username: \"johndoe\",\n        email: \"john.doe@solarpanel.com\",\n        password: hashedPassword,\n        firstName: \"John\",\n        lastName: \"Doe\",\n        role: \"sales\",\n      },\n      {\n        username: \"jansmith\",\n        email: \"jane.smith@solarpanel.com\",\n        password: hashedPassword,\n        firstName: \"Jane\", \n        lastName: \"Smith\",\n        role: \"marketing\",\n      },\n      {\n        username: \"mikejohnson\",\n        email: \"mike.johnson@solarpanel.com\",\n        password: hashedPassword,\n        firstName: \"Mike\",\n        lastName: \"Johnson\",\n        role: \"sales\",\n      }\n    ]).returning();\n\n    console.log(`Created ${createdUsers.length} users`);\n\n    // Create leads\n    const createdLeads = await db.insert(leads).values([\n      {\n        firstName: \"Sarah\",\n        lastName: \"Johnson\",\n        email: \"sarah.johnson@greentech.com\",\n        phone: \"+1-555-0101\",\n        company: \"GreenTech Industries\",\n        address: \"123 Business Ave\",\n        city: \"San Francisco\",\n        state: \"CA\",\n        zipCode: \"94105\",\n        status: \"new\",\n        source: \"web form\",\n        estimatedValue: \"25000.00\",\n        probability: 25,\n        assignedTo: createdUsers[1].id, // John Doe\n        notes: \"Interested in commercial solar installation for office building\"\n      },\n      {\n        firstName: \"Robert\",\n        lastName: \"Wilson\",\n        email: \"robert.wilson@solardynamics.com\",\n        phone: \"+1-555-0102\",\n        company: \"Solar Dynamics\",\n        address: \"456 Green St\",\n        city: \"Austin\", \n        state: \"TX\",\n        zipCode: \"73301\",\n        status: \"contacted\",\n        source: \"referral\",\n        estimatedValue: \"67000.00\",\n        probability: 50,\n        assignedTo: createdUsers[1].id, // John Doe\n        notes: \"Needs proposal for 40kW system. Decision maker confirmed.\"\n      },\n      {\n        firstName: \"Jennifer\",\n        lastName: \"Lee\",\n        email: \"jennifer.lee@sustainablesystems.com\",\n        phone: \"+1-555-0103\",\n        company: \"Sustainable Systems\",\n        address: \"789 Eco Way\",\n        city: \"Portland\",\n        state: \"OR\",\n        zipCode: \"97201\",\n        status: \"proposal\",\n        source: \"cold call\",\n        estimatedValue: \"156000.00\",\n        probability: 80,\n        assignedTo: createdUsers[3].id, // Mike Johnson\n        notes: \"Large commercial project. Proposal sent, waiting for board approval.\"\n      },\n      {\n        firstName: \"David\",\n        lastName: \"Brown\", \n        email: \"david.brown@futuresolar.com\",\n        phone: \"+1-555-0104\",\n        company: \"Future Solar\",\n        address: \"321 Innovation Dr\",\n        city: \"Denver\",\n        state: \"CO\",\n        zipCode: \"80202\",\n        status: \"proposal\",\n        source: \"trade show\",\n        estimatedValue: \"89000.00\",\n        probability: 75,\n        assignedTo: createdUsers[3].id, // Mike Johnson\n        notes: \"Ready to move forward. Financing options discussed.\"\n      },\n      {\n        firstName: \"Mark\",\n        lastName: \"Thompson\",\n        email: \"mark.thompson@energyefficient.com\",\n        phone: \"+1-555-0105\",\n        company: \"Energy Efficient Inc\",\n        address: \"654 Power Blvd\",\n        city: \"Phoenix\",\n        state: \"AZ\",\n        zipCode: \"85001\",\n        status: \"closed_won\",\n        source: \"referral\",\n        estimatedValue: \"125000.00\",\n        probability: 100,\n        assignedTo: createdUsers[1].id, // John Doe\n        notes: \"Contract signed! Installation scheduled for next month.\"\n      }\n    ]).returning();\n\n    console.log(`Created ${createdLeads.length} leads`);\n\n    // Create campaigns\n    const createdCampaigns = await db.insert(campaigns).values([\n      {\n        name: \"Spring Solar Promotion 2024\",\n        subject: \"Save 25% on Premium Solar Installation This Spring\",\n        content: \"Take advantage of our spring promotion and federal tax incentives...\",\n        status: \"active\",\n        scheduledAt: new Date(\"2024-03-15T09:00:00Z\"),\n        createdBy: createdUsers[2].id, // Jane Smith\n      },\n      {\n        name: \"Commercial Solar Solutions\",\n        subject: \"Transform Your Business with Solar Energy\",\n        content: \"Reduce your energy costs and carbon footprint with our commercial solutions...\",\n        status: \"scheduled\",\n        scheduledAt: new Date(\"2024-03-20T10:00:00Z\"),\n        createdBy: createdUsers[2].id, // Jane Smith\n      },\n      {\n        name: \"Residential Solar Upgrade\",\n        subject: \"Upgrade to Smart Solar Technology\",\n        content: \"Smart inverters and monitoring systems now available...\",\n        status: \"completed\",\n        sentAt: new Date(\"2024-03-01T09:00:00Z\"),\n        openRate: \"57.90\",\n        clickRate: \"19.50\",\n        createdBy: createdUsers[2].id, // Jane Smith\n      }\n    ]).returning();\n\n    console.log(`Created ${createdCampaigns.length} campaigns`);\n\n    // Create communications\n    const createdCommunications = await db.insert(communications).values([\n      {\n        leadId: createdLeads[0].id,\n        userId: createdUsers[1].id, // John Doe\n        type: \"call\",\n        subject: \"Initial contact call\",\n        content: \"Discussed solar panel options and financing. Customer interested in 25kW system.\",\n        completedAt: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago\n      },\n      {\n        leadId: createdLeads[1].id,\n        userId: createdUsers[1].id, // John Doe\n        type: \"email\",\n        subject: \"Proposal sent\",\n        content: \"Sent detailed proposal for 40kW commercial solar installation with ROI analysis.\",\n        completedAt: new Date(Date.now() - 4 * 60 * 60 * 1000), // 4 hours ago\n      },\n      {\n        leadId: createdLeads[2].id,\n        userId: createdUsers[3].id, // Mike Johnson\n        type: \"meeting\",\n        subject: \"Site visit scheduled\",\n        content: \"Scheduled on-site assessment for next Tuesday at 2:00 PM.\",\n        scheduledAt: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // 3 days from now\n      },\n      {\n        leadId: createdLeads[4].id,\n        userId: createdUsers[1].id, // John Doe\n        type: \"note\",\n        subject: \"Contract signed\",\n        content: \"Customer signed 125kW commercial installation contract. Project starts next month.\",\n        completedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 days ago\n      }\n    ]).returning();\n\n    console.log(`Created ${createdCommunications.length} communications`);\n\n    console.log(\"Database seed completed successfully!\");\n  } catch (error) {\n    console.error(\"Error seeding database:\", error);\n    throw error;\n  }\n}\n\n// Run seed if this file is executed directly\nseed().catch(console.error);\n\nexport { seed };","size_bytes":7214},"server/storage.ts":{"content":"import { \n  users, \n  leads, \n  campaigns, \n  communications,\n  type User, \n  type InsertUser,\n  type Lead,\n  type InsertLead,\n  type Campaign,\n  type InsertCampaign,\n  type Communication,\n  type InsertCommunication\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, or, like, count } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Leads\n  getLeads(filters?: { status?: string; assignedTo?: string; search?: string }): Promise<Lead[]>;\n  getLead(id: string): Promise<Lead | undefined>;\n  createLead(lead: InsertLead): Promise<Lead>;\n  updateLead(id: string, updates: Partial<InsertLead>): Promise<Lead>;\n  deleteLead(id: string): Promise<boolean>;\n  getLeadsByStatus(): Promise<{ status: string; count: number; totalValue: number }[]>;\n  \n  // Campaigns\n  getCampaigns(filters?: { status?: string; createdBy?: string }): Promise<Campaign[]>;\n  getCampaign(id: string): Promise<Campaign | undefined>;\n  createCampaign(campaign: InsertCampaign): Promise<Campaign>;\n  updateCampaign(id: string, updates: Partial<InsertCampaign>): Promise<Campaign>;\n  deleteCampaign(id: string): Promise<boolean>;\n  \n  // Communications\n  getCommunications(leadId?: string): Promise<Communication[]>;\n  createCommunication(communication: InsertCommunication): Promise<Communication>;\n  updateCommunication(id: string, updates: Partial<InsertCommunication>): Promise<Communication>;\n  deleteCommunication(id: string): Promise<boolean>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  // Leads\n  async getLeads(filters?: { status?: string; assignedTo?: string; search?: string }): Promise<Lead[]> {\n    const baseQuery = db.select().from(leads);\n    \n    const conditions = [];\n    \n    if (filters?.status) {\n      conditions.push(eq(leads.status, filters.status as any));\n    }\n    \n    if (filters?.assignedTo) {\n      conditions.push(eq(leads.assignedTo, filters.assignedTo));\n    }\n    \n    if (filters?.search) {\n      conditions.push(\n        or(\n          like(leads.firstName, `%${filters.search}%`),\n          like(leads.lastName, `%${filters.search}%`),\n          like(leads.company, `%${filters.search}%`),\n          like(leads.email, `%${filters.search}%`)\n        )\n      );\n    }\n    \n    if (conditions.length > 0) {\n      return baseQuery.where(and(...conditions)).orderBy(desc(leads.updatedAt));\n    }\n    \n    return baseQuery.orderBy(desc(leads.updatedAt));\n  }\n\n  async getLead(id: string): Promise<Lead | undefined> {\n    const [lead] = await db.select().from(leads).where(eq(leads.id, id));\n    return lead || undefined;\n  }\n\n  async createLead(insertLead: InsertLead): Promise<Lead> {\n    const [lead] = await db\n      .insert(leads)\n      .values({\n        ...insertLead,\n        updatedAt: new Date(),\n      })\n      .returning();\n    return lead;\n  }\n\n  async updateLead(id: string, updates: Partial<InsertLead>): Promise<Lead> {\n    const [lead] = await db\n      .update(leads)\n      .set({\n        ...updates,\n        updatedAt: new Date(),\n      })\n      .where(eq(leads.id, id))\n      .returning();\n    return lead;\n  }\n\n  async deleteLead(id: string): Promise<boolean> {\n    const result = await db.delete(leads).where(eq(leads.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async getLeadsByStatus(): Promise<{ status: string; count: number; totalValue: number }[]> {\n    const result = await db\n      .select({\n        status: leads.status,\n        count: count(),\n      })\n      .from(leads)\n      .groupBy(leads.status);\n    \n    return result.map(row => ({\n      status: row.status,\n      count: row.count,\n      totalValue: 0, // TODO: implement sum calculation\n    }));\n  }\n\n  // Campaigns\n  async getCampaigns(filters?: { status?: string; createdBy?: string }): Promise<Campaign[]> {\n    const baseQuery = db.select().from(campaigns);\n    \n    const conditions = [];\n    \n    if (filters?.status) {\n      conditions.push(eq(campaigns.status, filters.status as any));\n    }\n    \n    if (filters?.createdBy) {\n      conditions.push(eq(campaigns.createdBy, filters.createdBy));\n    }\n    \n    if (conditions.length > 0) {\n      return baseQuery.where(and(...conditions)).orderBy(desc(campaigns.createdAt));\n    }\n    \n    return baseQuery.orderBy(desc(campaigns.createdAt));\n  }\n\n  async getCampaign(id: string): Promise<Campaign | undefined> {\n    const [campaign] = await db.select().from(campaigns).where(eq(campaigns.id, id));\n    return campaign || undefined;\n  }\n\n  async createCampaign(insertCampaign: InsertCampaign): Promise<Campaign> {\n    const [campaign] = await db\n      .insert(campaigns)\n      .values(insertCampaign)\n      .returning();\n    return campaign;\n  }\n\n  async updateCampaign(id: string, updates: Partial<InsertCampaign>): Promise<Campaign> {\n    const [campaign] = await db\n      .update(campaigns)\n      .set(updates)\n      .where(eq(campaigns.id, id))\n      .returning();\n    return campaign;\n  }\n\n  async deleteCampaign(id: string): Promise<boolean> {\n    const result = await db.delete(campaigns).where(eq(campaigns.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Communications\n  async getCommunications(leadId?: string): Promise<Communication[]> {\n    const baseQuery = db.select().from(communications);\n    \n    if (leadId) {\n      return baseQuery.where(eq(communications.leadId, leadId)).orderBy(desc(communications.createdAt));\n    }\n    \n    return baseQuery.orderBy(desc(communications.createdAt));\n  }\n\n  async createCommunication(insertCommunication: InsertCommunication): Promise<Communication> {\n    const [communication] = await db\n      .insert(communications)\n      .values(insertCommunication)\n      .returning();\n    return communication;\n  }\n\n  async updateCommunication(id: string, updates: Partial<InsertCommunication>): Promise<Communication> {\n    const [communication] = await db\n      .update(communications)\n      .set(updates)\n      .where(eq(communications.id, id))\n      .returning();\n    return communication;\n  }\n\n  async deleteCommunication(id: string): Promise<boolean> {\n    const result = await db.delete(communications).where(eq(communications.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":7152},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { \n  pgTable, \n  text, \n  varchar, \n  timestamp, \n  integer, \n  decimal, \n  boolean,\n  pgEnum\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const userRoleEnum = pgEnum('user_role', ['admin', 'sales', 'marketing', 'support']);\nexport const leadStatusEnum = pgEnum('lead_status', ['new', 'contacted', 'proposal', 'closed_won', 'closed_lost']);\nexport const campaignStatusEnum = pgEnum('campaign_status', ['draft', 'scheduled', 'active', 'paused', 'completed']);\nexport const communicationTypeEnum = pgEnum('communication_type', ['email', 'sms', 'call', 'meeting', 'note']);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  role: userRoleEnum(\"role\").notNull().default('sales'),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Leads table\nexport const leads = pgTable(\"leads\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\"),\n  company: text(\"company\"),\n  address: text(\"address\"),\n  city: text(\"city\"),\n  state: text(\"state\"),\n  zipCode: text(\"zip_code\"),\n  status: leadStatusEnum(\"status\").notNull().default('new'),\n  source: text(\"source\"), // web form, referral, cold call, etc.\n  estimatedValue: decimal(\"estimated_value\", { precision: 10, scale: 2 }),\n  probability: integer(\"probability\").default(25), // percentage\n  assignedTo: varchar(\"assigned_to\").references(() => users.id),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\n// Marketing campaigns table\nexport const campaigns = pgTable(\"campaigns\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  subject: text(\"subject\").notNull(),\n  content: text(\"content\").notNull(),\n  status: campaignStatusEnum(\"status\").notNull().default('draft'),\n  scheduledAt: timestamp(\"scheduled_at\"),\n  sentAt: timestamp(\"sent_at\"),\n  openRate: decimal(\"open_rate\", { precision: 5, scale: 2 }),\n  clickRate: decimal(\"click_rate\", { precision: 5, scale: 2 }),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Communication history table\nexport const communications = pgTable(\"communications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  leadId: varchar(\"lead_id\").notNull().references(() => leads.id, { onDelete: 'cascade' }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  type: communicationTypeEnum(\"type\").notNull(),\n  subject: text(\"subject\"),\n  content: text(\"content\").notNull(),\n  scheduledAt: timestamp(\"scheduled_at\"),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  assignedLeads: many(leads),\n  campaigns: many(campaigns),\n  communications: many(communications),\n}));\n\nexport const leadsRelations = relations(leads, ({ one, many }) => ({\n  assignedUser: one(users, {\n    fields: [leads.assignedTo],\n    references: [users.id],\n  }),\n  communications: many(communications),\n}));\n\nexport const campaignsRelations = relations(campaigns, ({ one }) => ({\n  creator: one(users, {\n    fields: [campaigns.createdBy],\n    references: [users.id],\n  }),\n}));\n\nexport const communicationsRelations = relations(communications, ({ one }) => ({\n  lead: one(leads, {\n    fields: [communications.leadId],\n    references: [leads.id],\n  }),\n  user: one(users, {\n    fields: [communications.userId],\n    references: [users.id],\n  }),\n}));\n\n// Zod schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertLeadSchema = createInsertSchema(leads).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCampaignSchema = createInsertSchema(campaigns).omit({\n  id: true,\n  createdAt: true,\n  sentAt: true,\n  openRate: true,\n  clickRate: true,\n});\n\nexport const insertCommunicationSchema = createInsertSchema(communications).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Lead = typeof leads.$inferSelect;\nexport type InsertLead = z.infer<typeof insertLeadSchema>;\nexport type Campaign = typeof campaigns.$inferSelect;\nexport type InsertCampaign = z.infer<typeof insertCampaignSchema>;\nexport type Communication = typeof communications.$inferSelect;\nexport type InsertCommunication = z.infer<typeof insertCommunicationSchema>;","size_bytes":5193},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/AppSidebar\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Pipeline from \"@/pages/Pipeline\";\nimport Campaigns from \"@/pages/Campaigns\";\nimport Communications from \"@/pages/Communications\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/pipeline\" component={Pipeline} />\n      <Route path=\"/leads\" component={Pipeline} />\n      <Route path=\"/campaigns\" component={Campaigns} />\n      <Route path=\"/communications\" component={Communications} />\n      <Route path=\"/analytics\" component={Dashboard} />\n      <Route path=\"/calendar\" component={Communications} />\n      <Route path=\"/reports\" component={Dashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nexport default function App() {\n  const style = {\n    \"--sidebar-width\": \"18rem\",\n    \"--sidebar-width-icon\": \"4rem\",\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <SidebarProvider style={style as React.CSSProperties}>\n          <div className=\"flex h-screen w-full bg-background\">\n            <AppSidebar />\n            <div className=\"flex flex-col flex-1 min-w-0\">\n              <header className=\"flex items-center justify-between px-6 py-4 border-b bg-card/50 backdrop-blur-md supports-[backdrop-filter]:bg-card/30 shadow-sm\">\n                <div className=\"flex items-center gap-4\">\n                  <SidebarTrigger \n                    data-testid=\"button-sidebar-toggle\" \n                  />\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"h-8 w-8 rounded-lg bg-primary/10 flex items-center justify-center\">\n                      <div className=\"h-4 w-4 rounded bg-primary\"></div>\n                    </div>\n                    <div>\n                      <h1 className=\"text-sm font-semibold text-foreground\">Solar CRM</h1>\n                      <p className=\"text-xs text-muted-foreground\">Professional Pipeline Management</p>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <ThemeToggle />\n                </div>\n              </header>\n              <main className=\"flex-1 overflow-auto bg-muted/30\">\n                <div className=\"container mx-auto p-6 max-w-7xl\">\n                  <Router />\n                </div>\n              </main>\n            </div>\n          </div>\n        </SidebarProvider>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}","size_bytes":3010},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 210 20% 98%;\n\n  --foreground: 210 15% 15%;\n\n  --border: 210 15% 85%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 220 15% 20%;\n\n  --card-border: 210 15% 90%;\n\n  --sidebar: 220 13% 96%;\n\n  --sidebar-foreground: 220 15% 20%;\n\n  --sidebar-border: 220 13% 89%;\n\n  --sidebar-primary: 210 100% 30%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 220 13% 91%;\n\n  --sidebar-accent-foreground: 220 15% 20%;\n\n  --sidebar-ring: 210 100% 30%;\n\n  --popover: 0 0% 100%;\n\n  --popover-foreground: 220 15% 20%;\n\n  --popover-border: 220 13% 89%;\n\n  --primary: 210 100% 30%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 45 95% 48%;\n\n  --secondary-foreground: 220 15% 15%;\n\n  --muted: 210 15% 92%;\n\n  --muted-foreground: 220 9% 46%;\n\n  --accent: 45 95% 93%;\n\n  --accent-foreground: 45 95% 25%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 220 13% 86%;\n  --ring: 210 100% 30%;\n  --chart-1: 210 100% 30%;\n  --chart-2: 45 95% 48%;\n  --chart-3: 142 76% 36%;\n  --chart-4: 38 92% 50%;\n  --chart-5: 270 65% 55%;\n\n  --font-sans: Inter, Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 13% 69% / 0.08);\n  --shadow-xs: 0px 1px 2px 0px hsl(220 13% 69% / 0.12);\n  --shadow-sm: 0px 1px 3px 0px hsl(220 13% 69% / 0.10), 0px 1px 2px -1px hsl(220 13% 69% / 0.10);\n  --shadow: 0px 1px 3px 0px hsl(220 13% 69% / 0.10), 0px 1px 2px -1px hsl(220 13% 69% / 0.10);\n  --shadow-md: 0px 4px 6px -1px hsl(220 13% 69% / 0.10), 0px 2px 4px -2px hsl(220 13% 69% / 0.10);\n  --shadow-lg: 0px 10px 15px -3px hsl(220 13% 69% / 0.10), 0px 4px 6px -4px hsl(220 13% 69% / 0.10);\n  --shadow-xl: 0px 20px 25px -5px hsl(220 13% 69% / 0.10), 0px 8px 10px -6px hsl(220 13% 69% / 0.10);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 13% 69% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 40% 8%;\n\n  --foreground: 210 10% 92%;\n\n  --border: 220 20% 25%;\n\n  --card: 220 35% 12%;\n\n  --card-foreground: 220 9% 89%;\n\n  --card-border: 222 47% 21%;\n\n  --sidebar: 222 47% 13%;\n\n  --sidebar-foreground: 220 9% 89%;\n\n  --sidebar-border: 222 47% 19%;\n\n  --sidebar-primary: 210 100% 70%;\n\n  --sidebar-primary-foreground: 220 15% 20%;\n\n  --sidebar-accent: 222 47% 19%;\n\n  --sidebar-accent-foreground: 220 9% 89%;\n\n  --sidebar-ring: 210 100% 70%;\n\n  --popover: 222 47% 16%;\n\n  --popover-foreground: 220 9% 89%;\n\n  --popover-border: 222 47% 21%;\n\n  --primary: 210 100% 70%;\n\n  --primary-foreground: 220 15% 20%;\n\n  --secondary: 45 95% 68%;\n\n  --secondary-foreground: 220 15% 15%;\n\n  --muted: 222 47% 19%;\n\n  --muted-foreground: 220 9% 63%;\n\n  --accent: 222 47% 19%;\n\n  --accent-foreground: 220 9% 89%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 222 47% 28%;\n  --ring: 210 100% 70%;\n  --chart-1: 210 100% 70%;\n  --chart-2: 45 95% 68%;\n  --chart-3: 142 76% 56%;\n  --chart-4: 38 92% 60%;\n  --chart-5: 270 65% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(222 47% 4% / 0.20);\n  --shadow-xs: 0px 1px 2px 0px hsl(222 47% 4% / 0.25);\n  --shadow-sm: 0px 1px 3px 0px hsl(222 47% 4% / 0.20), 0px 1px 2px -1px hsl(222 47% 4% / 0.20);\n  --shadow: 0px 1px 3px 0px hsl(222 47% 4% / 0.20), 0px 1px 2px -1px hsl(222 47% 4% / 0.20);\n  --shadow-md: 0px 4px 6px -1px hsl(222 47% 4% / 0.20), 0px 2px 4px -2px hsl(222 47% 4% / 0.20);\n  --shadow-lg: 0px 10px 15px -3px hsl(222 47% 4% / 0.20), 0px 4px 6px -4px hsl(222 47% 4% / 0.20);\n  --shadow-xl: 0px 20px 25px -5px hsl(222 47% 4% / 0.20), 0px 8px 10px -6px hsl(222 47% 4% / 0.20);\n  --shadow-2xl: 0px 25px 50px -12px hsl(222 47% 4% / 0.40);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n\n  /* Professional Micro-Interactions */\n  \n  /* Enhanced Focus States with Smooth Transitions */\n  .focus-enhance {\n    transition: all 200ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n  \n  .focus-enhance:focus-within {\n    transform: translateY(-1px);\n    box-shadow: 0 4px 12px -2px rgba(0, 0, 0, 0.1);\n  }\n  \n  /* Professional Scale Interactions */\n  .scale-interaction {\n    transition: transform 150ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n  \n  .scale-interaction:hover {\n    transform: scale(1.02);\n  }\n  \n  .scale-interaction:active {\n    transform: scale(0.98);\n  }\n  \n  /* Enhanced Button Interactions */\n  .button-enhance {\n    transition: all 200ms cubic-bezier(0.4, 0, 0.2, 1);\n    position: relative;\n    overflow: hidden;\n  }\n  \n  .button-enhance::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: linear-gradient(45deg, transparent 30%, rgba(255, 255, 255, 0.1) 50%, transparent 70%);\n    transform: translateX(-100%);\n    transition: transform 300ms ease;\n  }\n  \n  .button-enhance:hover::before {\n    transform: translateX(100%);\n  }\n  \n  /* Smooth Loading States */\n  .loading-shimmer {\n    background: linear-gradient(90deg, \n      hsl(var(--muted)) 25%, \n      hsl(var(--muted) / 0.8) 50%, \n      hsl(var(--muted)) 75%\n    );\n    background-size: 200% 100%;\n    animation: shimmer 2s infinite;\n  }\n  \n  @keyframes shimmer {\n    0% { background-position: -200% 0; }\n    100% { background-position: 200% 0; }\n  }\n  \n  /* Professional Card Interactions */\n  .card-enhance {\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    will-change: transform, box-shadow;\n  }\n  \n  .card-enhance:hover {\n    transform: translateY(-2px);\n    box-shadow: \n      0 10px 25px -5px rgba(0, 0, 0, 0.1),\n      0 8px 10px -6px rgba(0, 0, 0, 0.1);\n  }\n  \n  /* Subtle Pulse Animation for Active States */\n  .pulse-subtle {\n    animation: pulse-subtle 2s infinite;\n  }\n  \n  @keyframes pulse-subtle {\n    0%, 100% { opacity: 1; }\n    50% { opacity: 0.8; }\n  }\n  \n  /* Enhanced Form Field Interactions */\n  .field-enhance {\n    transition: all 200ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n  \n  .field-enhance:focus {\n    transform: scale(1.01);\n    border-color: hsl(var(--primary));\n    box-shadow: 0 0 0 3px hsl(var(--primary) / 0.1);\n  }\n  \n  /* Professional Ripple Effect */\n  .ripple {\n    position: relative;\n    overflow: hidden;\n  }\n  \n  .ripple::after {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 0;\n    height: 0;\n    border-radius: 50%;\n    background: rgba(255, 255, 255, 0.3);\n    transform: translate(-50%, -50%);\n    transition: width 300ms, height 300ms;\n  }\n  \n  .ripple:active::after {\n    width: 300px;\n    height: 300px;\n  }\n  \n  /* Smooth State Transitions */\n  .state-transition {\n    transition: all 200ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n  \n  /* Enhanced Dialog Animations */\n  .dialog-enhance {\n    animation: dialog-appear 300ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n  \n  @keyframes dialog-appear {\n    from {\n      opacity: 0;\n      transform: translate(-50%, -50%) scale(0.95);\n    }\n    to {\n      opacity: 1;\n      transform: translate(-50%, -50%) scale(1);\n    }\n  }\n  \n  /* Professional Loading Spinner */\n  .spinner-professional {\n    width: 16px;\n    height: 16px;\n    border: 2px solid hsl(var(--muted));\n    border-top: 2px solid hsl(var(--primary));\n    border-radius: 50%;\n    animation: spin-smooth 1s linear infinite;\n  }\n  \n  @keyframes spin-smooth {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n}","size_bytes":13433},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AppSidebar.tsx":{"content":"import {\n  BarChart3,\n  Users,\n  Target,\n  MessageSquare,\n  Settings,\n  Mail,\n  Calendar,\n  FileText,\n  Home,\n  Search,\n  Bell\n} from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/components/ui/sidebar\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\n\nconst mainMenuItems = [\n  {\n    title: \"Dashboard\",\n    url: \"/\",\n    icon: Home,\n    description: \"Overview & metrics\"\n  },\n  {\n    title: \"Pipeline\",\n    url: \"/pipeline\",\n    icon: Target,\n    description: \"Sales opportunities\"\n  },\n  {\n    title: \"Leads\",\n    url: \"/leads\",\n    icon: Users,\n    description: \"Lead management\"\n  }\n];\n\nconst communicationItems = [\n  {\n    title: \"Communications\",\n    url: \"/communications\",\n    icon: MessageSquare,\n    description: \"Message history\"\n  },\n  {\n    title: \"Campaigns\",\n    url: \"/campaigns\",\n    icon: Mail,\n    description: \"Marketing campaigns\"\n  },\n  {\n    title: \"Calendar\",\n    url: \"/calendar\",\n    icon: Calendar,\n    description: \"Schedule & events\"\n  }\n];\n\nconst analyticsItems = [\n  {\n    title: \"Analytics\",\n    url: \"/analytics\",\n    icon: BarChart3,\n    description: \"Performance insights\"\n  },\n  {\n    title: \"Reports\",\n    url: \"/reports\",\n    icon: FileText,\n    description: \"Custom reports\"\n  }\n];\n\nconst quickActions = [\n  {\n    title: \"Search\",\n    icon: Search,\n    action: \"search\",\n  },\n  {\n    title: \"Notifications\",\n    icon: Bell,\n    action: \"notifications\",\n  }\n];\n\nconst MenuSection = ({ title, items }: { title: string; items: typeof mainMenuItems }) => {\n  const [location] = useLocation();\n  \n  return (\n    <SidebarGroup>\n      <SidebarGroupLabel className=\"text-xs font-semibold text-sidebar-foreground/70 uppercase tracking-wider px-2 py-2\">\n        {title}\n      </SidebarGroupLabel>\n      <SidebarGroupContent className=\"px-2\">\n        <SidebarMenu className=\"space-y-1\">\n          {items.map((item) => {\n            const isActive = location === item.url;\n            return (\n              <SidebarMenuItem key={item.title}>\n                <SidebarMenuButton \n                  asChild \n                  className={`\n                    h-12 px-3 hover-elevate rounded-lg transition-all duration-200\n                    ${isActive \n                      ? \"bg-primary text-primary-foreground shadow-sm\" \n                      : \"\"\n                    }\n                  `}\n                  data-testid={`link-${item.title.toLowerCase()}`}\n                >\n                  <Link href={item.url} className=\"flex items-center gap-3 w-full\">\n                    <div className={`\n                      flex items-center justify-center w-8 h-8 rounded-md\n                      ${isActive \n                        ? \"bg-primary-foreground/20\" \n                        : \"bg-sidebar-accent/30\"\n                      }\n                    `}>\n                      <item.icon className=\"h-4 w-4\" />\n                    </div>\n                    <div className=\"flex flex-col items-start\">\n                      <span className=\"font-medium text-sm\">{item.title}</span>\n                      <span className=\"text-xs opacity-70\">{item.description}</span>\n                    </div>\n                  </Link>\n                </SidebarMenuButton>\n              </SidebarMenuItem>\n            );\n          })}\n        </SidebarMenu>\n      </SidebarGroupContent>\n    </SidebarGroup>\n  );\n};\n\nexport function AppSidebar() {\n  const handleQuickAction = (action: string) => {\n    console.log(`${action} triggered`);\n  };\n\n  return (\n    <Sidebar className=\"border-r border-border/50\">\n      <SidebarHeader className=\"p-6 border-b border-border/50 bg-card/30\">\n        <div className=\"flex items-center gap-4\">\n          <div className=\"flex h-10 w-10 items-center justify-center rounded-xl bg-gradient-to-br from-primary to-primary/80 shadow-sm\">\n            <Target className=\"h-5 w-5 text-primary-foreground\" />\n          </div>\n          <div>\n            <h2 className=\"text-lg font-bold text-foreground\">SolarCRM</h2>\n            <p className=\"text-xs text-muted-foreground font-medium\">Enterprise Pipeline Management</p>\n          </div>\n        </div>\n      </SidebarHeader>\n\n      <SidebarContent className=\"py-4\">\n        <MenuSection title=\"Main\" items={mainMenuItems} />\n        <MenuSection title=\"Communication\" items={communicationItems} />\n        <MenuSection title=\"Analytics\" items={analyticsItems} />\n        \n        <SidebarGroup className=\"mt-4\">\n          <SidebarGroupLabel className=\"text-xs font-semibold text-sidebar-foreground/70 uppercase tracking-wider px-2 py-2\">\n            Quick Actions\n          </SidebarGroupLabel>\n          <SidebarGroupContent className=\"px-2\">\n            <SidebarMenu className=\"space-y-1\">\n              {quickActions.map((action) => (\n                <SidebarMenuItem key={action.title}>\n                  <SidebarMenuButton \n                    onClick={() => handleQuickAction(action.action)}\n                    className=\"h-10 px-3 hover-elevate rounded-lg transition-all duration-200\"\n                    data-testid={`button-${action.title.toLowerCase()}`}\n                  >\n                    <div className=\"flex items-center justify-center w-7 h-7 rounded-md bg-sidebar-accent/30\">\n                      <action.icon className=\"h-4 w-4\" />\n                    </div>\n                    <span className=\"font-medium text-sm\">{action.title}</span>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n\n      <SidebarFooter className=\"p-4 border-t border-border/50 bg-card/30\">\n        <div className=\"flex items-center gap-3 p-2 rounded-lg hover-elevate transition-all duration-200\">\n          <Avatar className=\"h-10 w-10 border-2 border-border/20\">\n            <AvatarImage src=\"\" />\n            <AvatarFallback className=\"bg-primary/10 text-primary font-semibold\">JD</AvatarFallback>\n          </Avatar>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"text-sm font-semibold truncate\">John Doe</div>\n            <div className=\"text-xs text-muted-foreground\">Sales Manager</div>\n          </div>\n          <Button \n            size=\"icon\" \n            variant=\"ghost\" \n            data-testid=\"button-settings\"\n            onClick={() => console.log('Settings triggered')}\n          >\n            <Settings className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}","size_bytes":6780},"client/src/components/CampaignCard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Mail, \n  Eye, \n  MousePointer, \n  Calendar, \n  Play, \n  Pause, \n  Edit,\n  MoreHorizontal \n} from \"lucide-react\";\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger \n} from \"@/components/ui/dropdown-menu\";\nimport type { Campaign } from \"@shared/schema\";\n\ninterface CampaignCardProps {\n  campaign: Campaign;\n  onEdit?: (id: string) => void;\n  onToggleStatus?: (id: string) => void;\n  onViewDetails?: (id: string) => void;\n}\n\nfunction getStatusColor(status: Campaign['status']) {\n  switch (status) {\n    case 'draft': return 'bg-muted text-muted-foreground';\n    case 'scheduled': return 'bg-chart-4 text-white';\n    case 'active': return 'bg-chart-3 text-white';\n    case 'paused': return 'bg-chart-2 text-black';\n    case 'completed': return 'bg-chart-1 text-white';\n    default: return 'bg-muted text-muted-foreground';\n  }\n}\n\nfunction getStatusLabel(status: Campaign['status']) {\n  return status.charAt(0).toUpperCase() + status.slice(1);\n}\n\nfunction formatDate(date: Date | string | null) {\n  if (!date) return '';\n  const d = typeof date === 'string' ? new Date(date) : date;\n  return d.toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: '2-digit',\n  });\n}\n\nexport default function CampaignCard({ \n  campaign, \n  onEdit, \n  onToggleStatus, \n  onViewDetails \n}: CampaignCardProps) {\n  const handleAction = (action: string) => {\n    console.log(`Campaign ${action} triggered for ${campaign.id}`);\n    \n    switch (action) {\n      case 'edit':\n        onEdit?.(campaign.id);\n        break;\n      case 'toggle':\n        onToggleStatus?.(campaign.id);\n        break;\n      case 'view':\n        onViewDetails?.(campaign.id);\n        break;\n    }\n  };\n\n  // Mock metrics for display (these would come from actual campaign data in a real implementation)\n  const mockMetrics = {\n    recipients: 2500,\n    delivered: 2450,\n    opened: 1020,\n    clicked: 245,\n    openRate: Number(campaign.openRate) || 41.6,\n    clickRate: Number(campaign.clickRate) || 10.0,\n  };\n\n  return (\n    <Card className=\"hover-elevate border-2 border-border/80 shadow-md hover:shadow-lg transition-all duration-200 bg-card\" data-testid={`card-campaign-${campaign.id}`}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"space-y-1\">\n            <CardTitle className=\"text-base line-clamp-2\" data-testid={`text-campaign-name-${campaign.id}`}>\n              {campaign.name}\n            </CardTitle>\n            <p className=\"text-sm text-muted-foreground line-clamp-2\">\n              {campaign.subject}\n            </p>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge \n              className={getStatusColor(campaign.status)}\n              data-testid={`badge-status-${campaign.id}`}\n            >\n              {getStatusLabel(campaign.status)}\n            </Badge>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button \n                  size=\"icon\" \n                  variant=\"ghost\" \n                  className=\"h-8 w-8\"\n                  data-testid={`button-menu-${campaign.id}`}\n                >\n                  <MoreHorizontal className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem onClick={() => handleAction('view')}>\n                  <Eye className=\"h-4 w-4 mr-2\" />\n                  View Details\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => handleAction('edit')}>\n                  <Edit className=\"h-4 w-4 mr-2\" />\n                  Edit Campaign\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => handleAction('toggle')}>\n                  {campaign.status === 'active' ? (\n                    <>\n                      <Pause className=\"h-4 w-4 mr-2\" />\n                      Pause Campaign\n                    </>\n                  ) : (\n                    <>\n                      <Play className=\"h-4 w-4 mr-2\" />\n                      Start Campaign\n                    </>\n                  )}\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {campaign.scheduledAt && (\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <Calendar className=\"h-4 w-4\" />\n            <span>Scheduled: {formatDate(campaign.scheduledAt)}</span>\n          </div>\n        )}\n        \n        {campaign.sentAt && (\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <Mail className=\"h-4 w-4\" />\n            <span>Sent: {formatDate(campaign.sentAt)}</span>\n          </div>\n        )}\n        \n        {campaign.status !== 'draft' && (\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-muted-foreground\">Sent</span>\n                <span className=\"font-medium\" data-testid={`text-sent-${campaign.id}`}>\n                  {mockMetrics.delivered.toLocaleString()}\n                </span>\n              </div>\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-muted-foreground flex items-center gap-1\">\n                  <Eye className=\"h-3 w-3\" />\n                  Opens\n                </span>\n                <span className=\"font-medium\" data-testid={`text-opens-${campaign.id}`}>\n                  {mockMetrics.openRate}%\n                </span>\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-muted-foreground\">Recipients</span>\n                <span className=\"font-medium\">\n                  {mockMetrics.recipients.toLocaleString()}\n                </span>\n              </div>\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-muted-foreground flex items-center gap-1\">\n                  <MousePointer className=\"h-3 w-3\" />\n                  Clicks\n                </span>\n                <span className=\"font-medium\" data-testid={`text-clicks-${campaign.id}`}>\n                  {mockMetrics.clickRate}%\n                </span>\n              </div>\n            </div>\n          </div>\n        )}\n        \n        {campaign.status !== 'draft' && campaign.openRate && (\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-xs text-muted-foreground\">\n              <span>Open Rate</span>\n              <span>{mockMetrics.openRate}%</span>\n            </div>\n            <Progress value={mockMetrics.openRate} className=\"h-2\" />\n          </div>\n        )}\n        \n        <div className=\"flex justify-between items-center pt-2\">\n          <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n            <Mail className=\"h-3 w-3\" />\n            <span>Email Campaign</span>\n          </div>\n          <Button \n            size=\"sm\" \n            variant=\"outline\"\n            onClick={() => handleAction('view')}\n            data-testid={`button-view-details-${campaign.id}`}\n          >\n            View Details\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7897},"client/src/components/CommunicationHistory.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { communicationsApi } from \"@/lib/api\";\nimport type { Communication, InsertCommunication } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Phone, Mail, MessageSquare, Calendar, Plus, Clock, CheckCircle } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\n// Sample users for assignment - using actual user IDs from database\nconst SAMPLE_USERS = [\n  { id: '57aec392-41bc-44a8-ad61-8a7ed6afdf62', name: 'John Doe' },\n  { id: '6d3e500b-0ec1-405e-9bc6-aec4aca51822', name: 'Jane Smith' },\n  { id: '1d3e06fb-b1fe-40c1-b67d-a38f1becf695', name: 'Mike Johnson' },\n  { id: 'c177576b-322e-4610-83b0-95d34247c436', name: 'Admin User' },\n];\n\nconst COMMUNICATION_TYPES = [\n  { value: 'email', label: 'Email', icon: Mail },\n  { value: 'call', label: 'Call', icon: Phone },\n  { value: 'meeting', label: 'Meeting', icon: Calendar },\n  { value: 'sms', label: 'SMS', icon: MessageSquare },\n  { value: 'note', label: 'Note', icon: MessageSquare },\n];\n\ninterface CommunicationHistoryProps {\n  leadId: string;\n  leadName: string;\n}\n\ninterface QuickCommunicationDialogProps {\n  leadId: string;\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n  onSuccess: () => void;\n}\n\nfunction QuickCommunicationDialog({ leadId, isOpen, onOpenChange, onSuccess }: QuickCommunicationDialogProps) {\n  const [formData, setFormData] = useState({\n    type: 'note',\n    subject: '',\n    content: '',\n    scheduledAt: '',\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const mutation = useMutation({\n    mutationFn: (data: InsertCommunication) => communicationsApi.create(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/communications'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard-stats'] });\n      toast({\n        title: \"Success\",\n        description: \"Communication logged successfully\",\n      });\n      onOpenChange(false);\n      onSuccess();\n      setFormData({ type: 'note', subject: '', content: '', scheduledAt: '' });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\", \n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    mutation.mutate({\n      leadId,\n      userId: SAMPLE_USERS[0].id, // Default to first user\n      type: formData.type,\n      subject: formData.subject,\n      content: formData.content,\n      scheduledAt: formData.scheduledAt ? new Date(formData.scheduledAt) : null,\n    });\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Log Communication</DialogTitle>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"type\">Type</Label>\n            <Select value={formData.type} onValueChange={(value) => setFormData(prev => ({ ...prev, type: value }))}>\n              <SelectTrigger data-testid=\"select-quick-type\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {COMMUNICATION_TYPES.map((type) => (\n                  <SelectItem key={type.value} value={type.value}>{type.label}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <Label htmlFor=\"subject\">Subject</Label>\n            <Input\n              id=\"subject\"\n              value={formData.subject}\n              onChange={(e) => setFormData(prev => ({ ...prev, subject: e.target.value }))}\n              placeholder=\"Communication subject...\"\n              data-testid=\"input-quick-subject\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"content\">Content</Label>\n            <Textarea\n              id=\"content\"\n              value={formData.content}\n              onChange={(e) => setFormData(prev => ({ ...prev, content: e.target.value }))}\n              placeholder=\"Communication details...\"\n              rows={3}\n              required\n              data-testid=\"input-quick-content\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"scheduledAt\">Schedule (Optional)</Label>\n            <Input\n              id=\"scheduledAt\"\n              type=\"datetime-local\"\n              value={formData.scheduledAt}\n              onChange={(e) => setFormData(prev => ({ ...prev, scheduledAt: e.target.value }))}\n              data-testid=\"input-quick-scheduled\"\n            />\n          </div>\n\n          <div className=\"flex justify-end gap-2\">\n            <Button type=\"button\" variant=\"outline\" onClick={() => onOpenChange(false)}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={mutation.isPending} data-testid=\"button-save-quick-communication\">\n              {mutation.isPending ? 'Saving...' : 'Log Communication'}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport default function CommunicationHistory({ leadId, leadName }: CommunicationHistoryProps) {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  const { data: communications = [], isLoading } = useQuery({\n    queryKey: ['/api/communications', { leadId }],\n    queryFn: () => communicationsApi.getAll(leadId),\n  });\n\n  const getTypeIcon = (type: string) => {\n    const typeConfig = COMMUNICATION_TYPES.find(t => t.value === type);\n    const IconComponent = typeConfig?.icon || MessageSquare;\n    return <IconComponent className=\"h-4 w-4\" />;\n  };\n\n  const getStatusColor = (communication: Communication) => {\n    if (communication.completedAt) return 'bg-chart-3 text-white';\n    if (communication.scheduledAt && new Date(communication.scheduledAt) > new Date()) return 'bg-chart-4 text-white';\n    if (communication.scheduledAt && new Date(communication.scheduledAt) <= new Date()) return 'bg-chart-2 text-black';\n    return 'bg-chart-1 text-white';\n  };\n\n  const getStatusText = (communication: Communication) => {\n    if (communication.completedAt) return 'Completed';\n    if (communication.scheduledAt && new Date(communication.scheduledAt) > new Date()) return 'Scheduled';\n    if (communication.scheduledAt && new Date(communication.scheduledAt) <= new Date()) return 'Overdue';\n    return 'Draft';\n  };\n\n  const formatDate = (date: string | null) => {\n    if (!date) return '';\n    return format(new Date(date), 'MMM d, h:mm a');\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Communication History</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-4\">Loading communications...</div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg\">Communication History</CardTitle>\n          <Button size=\"sm\" onClick={() => setIsDialogOpen(true)} data-testid=\"button-add-communication\">\n            <Plus className=\"h-4 w-4 mr-1\" />\n            Log\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {communications.length === 0 ? (\n          <div className=\"text-center py-6\">\n            <MessageSquare className=\"h-8 w-8 text-muted-foreground mx-auto mb-2\" />\n            <p className=\"text-sm text-muted-foreground mb-3\">No communications yet</p>\n            <Button size=\"sm\" onClick={() => setIsDialogOpen(true)} data-testid=\"button-first-communication\">\n              Log First Communication\n            </Button>\n          </div>\n        ) : (\n          <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n            {communications.map((communication) => (\n              <div\n                key={communication.id}\n                className=\"flex items-start gap-3 p-3 rounded-lg border bg-muted/30\"\n                data-testid={`communication-item-${communication.id}`}\n              >\n                <div className=\"flex h-6 w-6 items-center justify-center rounded-full bg-primary text-primary-foreground flex-shrink-0\">\n                  {getTypeIcon(communication.type)}\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center justify-between gap-2 mb-1\">\n                    <div className=\"font-medium text-sm truncate\">\n                      {communication.subject || `${COMMUNICATION_TYPES.find(t => t.value === communication.type)?.label} Communication`}\n                    </div>\n                    <Badge size=\"sm\" className={getStatusColor(communication)}>\n                      {getStatusText(communication)}\n                    </Badge>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground line-clamp-2 mb-1\">\n                    {communication.content}\n                  </p>\n                  <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                    {communication.completedAt && (\n                      <div className=\"flex items-center gap-1\">\n                        <CheckCircle className=\"h-3 w-3\" />\n                        {formatDate(communication.completedAt)}\n                      </div>\n                    )}\n                    {communication.scheduledAt && !communication.completedAt && (\n                      <div className=\"flex items-center gap-1\">\n                        <Clock className=\"h-3 w-3\" />\n                        {formatDate(communication.scheduledAt)}\n                      </div>\n                    )}\n                    {!communication.scheduledAt && !communication.completedAt && (\n                      <div>{formatDate(communication.createdAt)}</div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n\n      <QuickCommunicationDialog\n        leadId={leadId}\n        isOpen={isDialogOpen}\n        onOpenChange={setIsDialogOpen}\n        onSuccess={() => {}}\n      />\n    </Card>\n  );\n}","size_bytes":10811},"client/src/components/CommunicationsManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { communicationsApi, leadsApi } from \"@/lib/api\";\nimport type { Communication, InsertCommunication, Lead } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertDialog, AlertDialogContent, AlertDialogHeader, AlertDialogTitle, AlertDialogDescription, AlertDialogFooter, AlertDialogCancel, AlertDialogAction } from \"@/components/ui/alert-dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Search, Filter, Plus, Phone, Mail, MessageSquare, Calendar, MoreHorizontal, Edit, Trash2, Clock } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\n// Sample users for assignment - using actual user IDs from database\nconst SAMPLE_USERS = [\n  { id: '57aec392-41bc-44a8-ad61-8a7ed6afdf62', name: 'John Doe' },\n  { id: '6d3e500b-0ec1-405e-9bc6-aec4aca51822', name: 'Jane Smith' },\n  { id: '1d3e06fb-b1fe-40c1-b67d-a38f1becf695', name: 'Mike Johnson' },\n  { id: 'c177576b-322e-4610-83b0-95d34247c436', name: 'Admin User' },\n];\n\nconst COMMUNICATION_TYPES = [\n  { value: 'email', label: 'Email', icon: Mail },\n  { value: 'call', label: 'Call', icon: Phone },\n  { value: 'meeting', label: 'Meeting', icon: Calendar },\n  { value: 'sms', label: 'SMS', icon: MessageSquare },\n  { value: 'note', label: 'Note', icon: MessageSquare },\n];\n\ninterface CommunicationCardProps {\n  communication: Communication;\n  lead?: Lead;\n  onEdit: (communication: Communication) => void;\n  onDelete: (id: string) => void;\n  onComplete: (id: string) => void;\n}\n\nfunction CommunicationCard({ communication, lead, onEdit, onDelete, onComplete }: CommunicationCardProps) {\n  const getTypeIcon = (type: string) => {\n    const typeConfig = COMMUNICATION_TYPES.find(t => t.value === type);\n    const IconComponent = typeConfig?.icon || MessageSquare;\n    return <IconComponent className=\"h-4 w-4\" />;\n  };\n\n  const getStatusColor = (communication: Communication) => {\n    if (communication.completedAt) return 'bg-chart-3 text-white';\n    if (communication.scheduledAt && new Date(communication.scheduledAt) > new Date()) return 'bg-chart-4 text-white';\n    if (communication.scheduledAt && new Date(communication.scheduledAt) <= new Date()) return 'bg-chart-2 text-black';\n    return 'bg-chart-1 text-white';\n  };\n\n  const getStatusText = (communication: Communication) => {\n    if (communication.completedAt) return 'Completed';\n    if (communication.scheduledAt && new Date(communication.scheduledAt) > new Date()) return 'Scheduled';\n    if (communication.scheduledAt && new Date(communication.scheduledAt) <= new Date()) return 'Overdue';\n    return 'Draft';\n  };\n\n  const formatDate = (date: string | Date | null) => {\n    if (!date) return '';\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\n    return format(dateObj, 'MMM d, yyyy h:mm a');\n  };\n\n  const leadName = lead ? `${lead.firstName} ${lead.lastName}` : 'Unknown Lead';\n  const leadCompany = lead?.company || '';\n\n  return (\n    <Card className=\"hover-elevate border-2 border-border/80 shadow-md hover:shadow-lg transition-all duration-200 bg-card\" data-testid={`card-communication-${communication.id}`}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between gap-4\">\n          <div className=\"flex items-start gap-3\">\n            <div className=\"flex h-8 w-8 items-center justify-center rounded-full bg-primary text-primary-foreground\">\n              {getTypeIcon(communication.type)}\n            </div>\n            <div className=\"space-y-1 flex-1\">\n              <CardTitle className=\"text-base\" data-testid={`text-subject-${communication.id}`}>\n                {communication.subject || `${COMMUNICATION_TYPES.find(t => t.value === communication.type)?.label} Communication`}\n              </CardTitle>\n              <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                {communication.content}\n              </p>\n              {communication.scheduledAt && (\n                <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                  <Clock className=\"h-3 w-3\" />\n                  Scheduled: {formatDate(communication.scheduledAt)}\n                </div>\n              )}\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge className={getStatusColor(communication)} data-testid={`badge-status-${communication.id}`}>\n              {getStatusText(communication)}\n            </Badge>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0\" data-testid={`button-menu-${communication.id}`}>\n                  <MoreHorizontal className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem onClick={() => onEdit(communication)} data-testid={`button-edit-${communication.id}`}>\n                  <Edit className=\"h-4 w-4 mr-2\" />\n                  Edit\n                </DropdownMenuItem>\n                {!communication.completedAt && (\n                  <DropdownMenuItem onClick={() => onComplete(communication.id)} data-testid={`button-complete-${communication.id}`}>\n                    <Clock className=\"h-4 w-4 mr-2\" />\n                    Mark Complete\n                  </DropdownMenuItem>\n                )}\n                <DropdownMenuItem \n                  onClick={() => onDelete(communication.id)} \n                  className=\"text-destructive\"\n                  data-testid={`button-delete-${communication.id}`}\n                >\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                  Delete\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Avatar className=\"h-6 w-6\">\n              <AvatarFallback className=\"text-xs\">\n                {leadName.split(' ').map(n => n[0]).join('')}\n              </AvatarFallback>\n            </Avatar>\n            <div>\n              <div className=\"text-sm font-medium\">{leadName}</div>\n              {leadCompany && <div className=\"text-xs text-muted-foreground\">{leadCompany}</div>}\n            </div>\n          </div>\n          <div className=\"text-xs text-muted-foreground\">\n            {communication.completedAt ? formatDate(communication.completedAt) : formatDate(communication.createdAt)}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface CommunicationDialogProps {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n  communication?: Communication;\n  onSuccess: () => void;\n}\n\nfunction CommunicationDialog({ isOpen, onOpenChange, communication, onSuccess }: CommunicationDialogProps) {\n  const [formData, setFormData] = useState({\n    leadId: communication?.leadId || '',\n    userId: communication?.userId || SAMPLE_USERS[0].id,\n    type: communication?.type || 'email',\n    subject: communication?.subject || '',\n    content: communication?.content || '',\n    scheduledAt: communication?.scheduledAt ? new Date(communication.scheduledAt).toISOString().slice(0, 16) : '',\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: leads = [] } = useQuery({\n    queryKey: ['/api/leads'],\n    queryFn: () => leadsApi.getAll(),\n  });\n\n  const mutation = useMutation({\n    mutationFn: (data: InsertCommunication) => {\n      if (communication) {\n        return communicationsApi.update(communication.id, data);\n      } else {\n        return communicationsApi.create(data);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/communications'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard-stats'] });\n      toast({\n        title: \"Success\",\n        description: `Communication ${communication ? 'updated' : 'created'} successfully`,\n      });\n      onOpenChange(false);\n      onSuccess();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    mutation.mutate({\n      ...formData,\n      scheduledAt: formData.scheduledAt ? new Date(formData.scheduledAt) : null,\n    });\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader className=\"border-b pb-4\">\n          <DialogTitle className=\"text-2xl font-bold text-foreground\">\n            {communication ? 'Edit Communication' : 'New Communication'}\n          </DialogTitle>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-6 py-4\">\n          {/* Assignment Section */}\n          <div className=\"space-y-4\">\n            <div className=\"border-b pb-2\">\n              <h3 className=\"text-lg font-semibold text-foreground flex items-center gap-2\">\n                <div className=\"h-5 w-5 rounded bg-primary/10 flex items-center justify-center\">\n                  <span className=\"text-primary text-sm font-bold\">1</span>\n                </div>\n                Assignment\n              </h3>\n              <p className=\"text-sm text-muted-foreground mt-1\">Associate with lead and assign team member</p>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"leadId\" className=\"text-sm font-medium text-foreground\">Lead *</Label>\n                <Select value={formData.leadId} onValueChange={(value) => setFormData(prev => ({ ...prev, leadId: value }))}>\n                  <SelectTrigger data-testid=\"select-lead\" className=\"border-border/60 focus:border-primary/60\">\n                    <SelectValue placeholder=\"Select lead\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {leads.map((lead) => (\n                      <SelectItem key={lead.id} value={lead.id}>\n                        {lead.firstName} {lead.lastName} - {lead.company}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"userId\" className=\"text-sm font-medium text-foreground\">Assigned To *</Label>\n                <Select value={formData.userId} onValueChange={(value) => setFormData(prev => ({ ...prev, userId: value }))}>\n                  <SelectTrigger data-testid=\"select-user\" className=\"border-border/60 focus:border-primary/60\">\n                    <SelectValue placeholder=\"Select user\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {SAMPLE_USERS.map((user) => (\n                      <SelectItem key={user.id} value={user.id}>{user.name}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n\n          {/* Communication Details Section */}\n          <div className=\"space-y-4\">\n            <div className=\"border-b pb-2\">\n              <h3 className=\"text-lg font-semibold text-foreground flex items-center gap-2\">\n                <div className=\"h-5 w-5 rounded bg-primary/10 flex items-center justify-center\">\n                  <span className=\"text-primary text-sm font-bold\">2</span>\n                </div>\n                Communication Details\n              </h3>\n              <p className=\"text-sm text-muted-foreground mt-1\">Type, timing, and content information</p>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"type\" className=\"text-sm font-medium text-foreground\">Communication Type *</Label>\n                <Select value={formData.type} onValueChange={(value) => setFormData(prev => ({ ...prev, type: value as Communication['type'] }))}>\n                  <SelectTrigger data-testid=\"select-type\" className=\"border-border/60 focus:border-primary/60\">\n                    <SelectValue placeholder=\"Select type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {COMMUNICATION_TYPES.map((type) => (\n                      <SelectItem key={type.value} value={type.value}>{type.label}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"scheduledAt\" className=\"text-sm font-medium text-foreground\">Schedule Date & Time</Label>\n                <Input\n                  id=\"scheduledAt\"\n                  type=\"datetime-local\"\n                  value={formData.scheduledAt}\n                  onChange={(e) => setFormData(prev => ({ ...prev, scheduledAt: e.target.value }))}\n                  data-testid=\"input-scheduled-at\"\n                  className=\"border-border/60 focus:border-primary/60\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"subject\" className=\"text-sm font-medium text-foreground\">Subject</Label>\n              <Input\n                id=\"subject\"\n                value={formData.subject}\n                onChange={(e) => setFormData(prev => ({ ...prev, subject: e.target.value }))}\n                placeholder=\"Communication subject...\"\n                data-testid=\"input-subject\"\n                className=\"border-border/60 focus:border-primary/60\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"content\" className=\"text-sm font-medium text-foreground\">Content *</Label>\n              <Textarea\n                id=\"content\"\n                value={formData.content}\n                onChange={(e) => setFormData(prev => ({ ...prev, content: e.target.value }))}\n                placeholder=\"Communication details...\"\n                rows={5}\n                required\n                data-testid=\"input-content\"\n                className=\"border-border/60 focus:border-primary/60 min-h-[120px] resize-none\"\n              />\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-between pt-4 border-t\">\n            <div className=\"text-sm text-muted-foreground\">\n              {communication ? 'Created: ' + format(new Date(communication.createdAt), 'MMM d, yyyy') : 'All required fields must be completed'}\n            </div>\n            <div className=\"flex gap-3\">\n              <Button type=\"button\" variant=\"outline\" onClick={() => onOpenChange(false)} className=\"min-w-20\">\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={mutation.isPending} data-testid=\"button-save-communication\" className=\"min-w-32\">\n                {mutation.isPending ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin\"></div>\n                    Saving...\n                  </div>\n                ) : (\n                  (communication ? 'Update' : 'Create') + ' Communication'\n                )}\n              </Button>\n            </div>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport default function CommunicationsManagement() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [typeFilter, setTypeFilter] = useState('all');\n  const [selectedLead, setSelectedLead] = useState('');\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingCommunication, setEditingCommunication] = useState<Communication | undefined>();\n  const [deleteCommunicationId, setDeleteCommunicationId] = useState<string | null>(null);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: communications = [], isLoading } = useQuery({\n    queryKey: ['/api/communications', { leadId: selectedLead, type: typeFilter }],\n    queryFn: () => communicationsApi.getAll(selectedLead === 'all' ? undefined : selectedLead || undefined),\n  });\n\n  const { data: leads = [] } = useQuery({\n    queryKey: ['/api/leads'],\n    queryFn: () => leadsApi.getAll(),\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => communicationsApi.delete(id),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/communications'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard-stats'] });\n      toast({\n        title: \"Success\",\n        description: \"Communication deleted successfully\",\n      });\n      setDeleteCommunicationId(null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const completeMutation = useMutation({\n    mutationFn: (id: string) => communicationsApi.update(id, { completedAt: new Date() }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/communications'] });\n      toast({\n        title: \"Success\",\n        description: \"Communication marked as completed\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredCommunications = communications.filter(comm => {\n    const matchesSearch = !searchTerm || \n      comm.subject?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      comm.content.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesType = typeFilter === 'all' || comm.type === typeFilter;\n    \n    return matchesSearch && matchesType;\n  });\n\n  const handleEdit = (communication: Communication) => {\n    setEditingCommunication(communication);\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    setDeleteCommunicationId(id);\n  };\n\n  const confirmDelete = () => {\n    if (deleteCommunicationId) {\n      deleteMutation.mutate(deleteCommunicationId);\n    }\n  };\n\n  const handleComplete = (id: string) => {\n    completeMutation.mutate(id);\n  };\n\n  const handleNewCommunication = () => {\n    setEditingCommunication(undefined);\n    setIsDialogOpen(true);\n  };\n\n  if (isLoading) {\n    return <div className=\"p-6\">Loading communications...</div>;\n  }\n\n  return (\n    <div className=\"space-y-8 p-8\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"space-y-2\">\n          <h1 className=\"text-3xl font-bold text-foreground tracking-tight\" data-testid=\"text-communications-title\">\n            Communications\n          </h1>\n          <p className=\"text-muted-foreground text-lg\">\n            Track all customer interactions and communications\n          </p>\n        </div>\n        <Button onClick={handleNewCommunication} data-testid=\"button-new-communication\" className=\"hover-elevate\" size=\"default\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          New Communication\n        </Button>\n      </div>\n\n      <div className=\"bg-card border border-border/60 rounded-lg p-6 shadow-sm space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-semibold text-foreground\">Communication Controls</h3>\n          <p className=\"text-sm text-muted-foreground\">Search and filter communications</p>\n        </div>\n        <div className=\"flex items-center gap-4 flex-wrap\">\n          <div className=\"relative flex-1 max-w-lg\">\n            <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search communications by subject, content...\"\n              className=\"pl-9 border-border/60 focus:border-primary/60\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              data-testid=\"input-search-communications\"\n            />\n          </div>\n          \n          <Select value={typeFilter} onValueChange={setTypeFilter}>\n            <SelectTrigger className=\"w-[180px] border-border/60 focus:border-primary/60\" data-testid=\"select-type-filter\">\n              <SelectValue placeholder=\"Filter by type\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Types</SelectItem>\n              {COMMUNICATION_TYPES.map((type) => (\n                <SelectItem key={type.value} value={type.value}>{type.label}</SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n\n          <Select value={selectedLead} onValueChange={setSelectedLead}>\n            <SelectTrigger className=\"w-[200px] border-border/60 focus:border-primary/60\" data-testid=\"select-lead-filter\">\n              <SelectValue placeholder=\"Filter by lead\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Leads</SelectItem>\n              {leads.map((lead) => (\n                <SelectItem key={lead.id} value={lead.id}>\n                  {lead.firstName} {lead.lastName}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      <div className=\"space-y-4\">\n        {filteredCommunications.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <MessageSquare className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No Communications Found</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              {searchTerm || typeFilter !== 'all' || selectedLead ? 'Try adjusting your filters' : 'Start tracking customer interactions'}\n            </p>\n            <Button onClick={handleNewCommunication}>Create First Communication</Button>\n          </div>\n        ) : (\n          filteredCommunications.map((communication) => {\n            const lead = leads.find(l => l.id === communication.leadId);\n            return (\n              <CommunicationCard\n                key={communication.id}\n                communication={communication}\n                lead={lead}\n                onEdit={handleEdit}\n                onDelete={handleDelete}\n                onComplete={handleComplete}\n              />\n            );\n          })\n        )}\n      </div>\n\n      <CommunicationDialog\n        isOpen={isDialogOpen}\n        onOpenChange={(open) => {\n          setIsDialogOpen(open);\n          if (!open) setEditingCommunication(undefined);\n        }}\n        communication={editingCommunication}\n        onSuccess={() => {}}\n      />\n\n      <AlertDialog open={deleteCommunicationId !== null} onOpenChange={() => setDeleteCommunicationId(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Communication</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete this communication? This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction onClick={confirmDelete} className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\">\n              Delete Communication\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}","size_bytes":24439},"client/src/components/DashboardStats.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { TrendingUp, Users, DollarSign, Target } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { dashboardApi } from \"@/lib/api\";\n\ninterface StatsCardProps {\n  title: string;\n  value: string;\n  change: string;\n  icon: React.ReactNode;\n  trend: 'up' | 'down' | 'neutral';\n  isLoading?: boolean;\n}\n\nfunction StatsCard({ title, value, change, icon, trend, isLoading }: StatsCardProps) {\n  const trendColor = trend === 'up' ? 'text-chart-3' : trend === 'down' ? 'text-destructive' : 'text-muted-foreground';\n  \n  return (\n    <Card className=\"card-enhance group border-border/60 shadow-sm\" data-testid={`card-stats-${title.toLowerCase().replace(' ', '-')}`}>\n      <CardHeader className=\"flex flex-row items-center justify-between gap-3 space-y-0 pb-3\">\n        <CardTitle className=\"text-sm font-semibold text-foreground/80 uppercase tracking-wide state-transition\">{title}</CardTitle>\n        <div className=\"flex h-9 w-9 items-center justify-center rounded-lg bg-primary/10 text-primary scale-interaction group-hover:bg-primary/15\">\n          {icon}\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        <div className=\"text-3xl font-bold text-foreground tracking-tight state-transition\" data-testid={`text-value-${title.toLowerCase().replace(' ', '-')}`}>\n          {isLoading ? (\n            <div className=\"loading-shimmer rounded h-8 w-24\"></div>\n          ) : (\n            value\n          )}\n        </div>\n        <div className={`text-sm ${trendColor} flex items-center gap-2 font-medium state-transition`} data-testid={`text-change-${title.toLowerCase().replace(' ', '-')}`}>\n          <div className={`flex h-5 w-5 items-center justify-center rounded-full scale-interaction ${\n            trend === 'up' ? 'bg-chart-3/20' : trend === 'down' ? 'bg-destructive/20' : 'bg-muted-foreground/20'\n          }`}>\n            <TrendingUp className=\"h-3 w-3 state-transition\" />\n          </div>\n          {isLoading ? (\n            <div className=\"loading-shimmer rounded h-4 w-32\"></div>\n          ) : (\n            change\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function DashboardStats() {\n  const { data: stats, isLoading, error } = useQuery({\n    queryKey: ['/api/dashboard-stats'],\n    queryFn: dashboardApi.getStats,\n  });\n\n  if (error) {\n    console.error('Failed to fetch dashboard stats:', error);\n  }\n\n  const statsCards = [\n    {\n      title: \"Total Leads\",\n      value: stats ? stats.totalLeads.toLocaleString() : \"0\",\n      change: \"+12% from last month\",\n      icon: <Users className=\"h-4 w-4\" />,\n      trend: 'up' as const,\n    },\n    {\n      title: \"Pipeline Value\",\n      value: stats ? stats.pipelineValue : \"$0\",\n      change: \"+8% from last month\", \n      icon: <DollarSign className=\"h-4 w-4\" />,\n      trend: 'up' as const,\n    },\n    {\n      title: \"Conversion Rate\",\n      value: stats ? stats.conversionRate : \"0%\",\n      change: \"+2.1% from last month\",\n      icon: <Target className=\"h-4 w-4\" />,\n      trend: 'up' as const,\n    },\n    {\n      title: \"Closed Deals\",\n      value: stats ? stats.closedDeals.toString() : \"0\",\n      change: \"+23% from last month\",\n      icon: <TrendingUp className=\"h-4 w-4\" />,\n      trend: 'up' as const,\n    },\n  ];\n\n  return (\n    <div className=\"grid gap-2 md:grid-cols-2 lg:grid-cols-4\">\n      {statsCards.map((stat) => (\n        <StatsCard key={stat.title} {...stat} isLoading={isLoading} />\n      ))}\n    </div>\n  );\n}","size_bytes":3573},"client/src/components/LeadManagement.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { AlertDialog, AlertDialogContent, AlertDialogHeader, AlertDialogTitle, AlertDialogDescription, AlertDialogFooter, AlertDialogCancel, AlertDialogAction } from \"@/components/ui/alert-dialog\";\nimport CommunicationHistory from \"@/components/CommunicationHistory\";\nimport { DollarSign, Phone, Mail, Calendar, Plus, Edit, Trash2, MoreHorizontal } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { leadsApi } from \"@/lib/api\";\nimport type { Lead, InsertLead } from \"@shared/schema\";\nimport { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface LeadCardProps {\n  lead: Lead;\n  onStatusUpdate: (leadId: string, newStatus: Lead['status']) => void;\n  onEdit: (lead: Lead) => void;\n  onDelete: (leadId: string) => void;\n}\n\nfunction LeadCard({ lead, onStatusUpdate, onEdit, onDelete }: LeadCardProps) {\n  const formatCurrency = (value: string | null) => {\n    if (!value) return '$0';\n    return `$${Number(value).toLocaleString()}`;\n  };\n\n  const formatDate = (dateInput: Date | string) => {\n    const date = typeof dateInput === 'string' ? new Date(dateInput) : dateInput;\n    const now = new Date();\n    const diffTime = Math.abs(now.getTime() - date.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 1) return '1 day ago';\n    if (diffDays < 7) return `${diffDays} days ago`;\n    return date.toLocaleDateString();\n  };\n\n  const getInitials = (firstName: string, lastName: string) => {\n    return `${firstName.charAt(0)}${lastName.charAt(0)}`;\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'new': return 'bg-chart-2 text-black';\n      case 'contacted': return 'bg-chart-4 text-white';\n      case 'proposal': return 'bg-chart-1 text-white';\n      case 'closed_won': return 'bg-chart-3 text-white';\n      case 'closed_lost': return 'bg-destructive text-white';\n      default: return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'new': return 'New';\n      case 'contacted': return 'Contacted';\n      case 'proposal': return 'Proposal';\n      case 'closed_won': return 'Closed Won';\n      case 'closed_lost': return 'Closed Lost';\n      default: return status;\n    }\n  };\n\n  return (\n    <Card className=\"mb-3 card-enhance border-2 border-border/80 shadow-md group bg-card\" data-testid={`card-lead-${lead.id}`}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <div className=\"flex items-center gap-2\">\n            <Avatar className=\"h-8 w-8 scale-interaction\">\n              <AvatarImage src=\"\" />\n              <AvatarFallback className=\"state-transition\">{getInitials(lead.firstName, lead.lastName)}</AvatarFallback>\n            </Avatar>\n            <div>\n              <div className=\"font-medium text-sm state-transition\" data-testid={`text-lead-name-${lead.id}`}>\n                {lead.firstName} {lead.lastName}\n              </div>\n              <div className=\"text-xs text-muted-foreground state-transition\">{lead.company}</div>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Select value={lead.status} onValueChange={(value) => onStatusUpdate(lead.id, value as Lead['status'])}>\n              <SelectTrigger className=\"h-6 text-xs border-0 p-0\">\n                <Badge className={`${getStatusColor(lead.status)} scale-interaction`} data-testid={`badge-status-${lead.id}`}>\n                  {getStatusLabel(lead.status)}\n                </Badge>\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"new\">New</SelectItem>\n                <SelectItem value=\"contacted\">Contacted</SelectItem>\n                <SelectItem value=\"proposal\">Proposal</SelectItem>\n                <SelectItem value=\"closed_won\">Closed Won</SelectItem>\n                <SelectItem value=\"closed_lost\">Closed Lost</SelectItem>\n              </SelectContent>\n            </Select>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button size=\"icon\" variant=\"ghost\" className=\"h-6 w-6 ripple\">\n                  <MoreHorizontal className=\"h-3 w-3 state-transition\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem onClick={() => onEdit(lead)}>\n                  <Edit className=\"h-4 w-4 mr-2\" />\n                  Edit Lead\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => onDelete(lead.id)} className=\"text-destructive\">\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                  Delete Lead\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center justify-between text-sm mb-2\">\n          <div className=\"flex items-center gap-1 text-chart-1 state-transition\">\n            <DollarSign className=\"h-3 w-3 scale-interaction\" />\n            <span data-testid={`text-lead-value-${lead.id}`} className=\"state-transition\">{formatCurrency(lead.estimatedValue)}</span>\n          </div>\n          <div className=\"text-xs text-muted-foreground\">{lead.probability}%</div>\n        </div>\n\n        <div className=\"text-xs text-muted-foreground mb-3 space-y-1\">\n          <div className=\"flex items-center gap-1\">\n            <Mail className=\"h-3 w-3\" />\n            <span>{lead.email}</span>\n          </div>\n          {lead.phone && (\n            <div className=\"flex items-center gap-1\">\n              <Phone className=\"h-3 w-3\" />\n              <span>{lead.phone}</span>\n            </div>\n          )}\n          <div className=\"flex items-center gap-1\">\n            <Calendar className=\"h-3 w-3\" />\n            <span>Updated {formatDate(lead.updatedAt)}</span>\n          </div>\n        </div>\n        \n        <div className=\"flex gap-1\">\n          <Button size=\"sm\" variant=\"outline\" className=\"h-7 text-xs\" data-testid={`button-call-${lead.id}`}>\n            <Phone className=\"h-3 w-3\" />\n          </Button>\n          <Button size=\"sm\" variant=\"outline\" className=\"h-7 text-xs\" data-testid={`button-email-${lead.id}`}>\n            <Mail className=\"h-3 w-3\" />\n          </Button>\n          <Button size=\"sm\" variant=\"outline\" className=\"h-7 text-xs\" data-testid={`button-schedule-${lead.id}`}>\n            <Calendar className=\"h-3 w-3\" />\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface PipelineStageProps {\n  title: string;\n  status: string;\n  leads: Lead[];\n  color: string;\n  onStatusUpdate: (leadId: string, newStatus: Lead['status']) => void;\n  onEdit: (lead: Lead) => void;\n  onDelete: (leadId: string) => void;\n}\n\nfunction PipelineStage({ title, status, leads, color, onStatusUpdate, onEdit, onDelete }: PipelineStageProps) {\n  const totalValue = leads.reduce((sum, lead) => sum + Number(lead.estimatedValue || 0), 0);\n  \n  return (\n    <div className=\"flex-1 min-w-[280px]\">\n      <Card className=\"h-full\">\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n              <div className={`w-2 h-2 rounded-full ${color}`}></div>\n              {title}\n            </CardTitle>\n            <Badge variant=\"secondary\" data-testid={`badge-count-${title.toLowerCase().replace(' ', '-')}`}>\n              {leads.length}\n            </Badge>\n          </div>\n          <div className=\"text-xs text-muted-foreground\" data-testid={`text-total-value-${title.toLowerCase().replace(' ', '-')}`}>\n            Total: ${(totalValue / 1000).toFixed(0)}K\n          </div>\n        </CardHeader>\n        <CardContent className=\"pt-0\">\n          <div className=\"space-y-2 max-h-[500px] overflow-y-auto\">\n            {leads.map((lead) => (\n              <LeadCard \n                key={lead.id} \n                lead={lead} \n                onStatusUpdate={onStatusUpdate}\n                onEdit={onEdit}\n                onDelete={onDelete}\n              />\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\ninterface LeadDialogProps {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n  lead?: Lead;\n  onSuccess: () => void;\n}\n\n// Sample users for assignment - using actual user IDs from database\nconst SAMPLE_USERS = [\n  { id: '57aec392-41bc-44a8-ad61-8a7ed6afdf62', name: 'John Doe' },\n  { id: '6d3e500b-0ec1-405e-9bc6-aec4aca51822', name: 'Jane Smith' },\n  { id: '1d3e06fb-b1fe-40c1-b67d-a38f1becf695', name: 'Mike Johnson' },\n  { id: 'c177576b-322e-4610-83b0-95d34247c436', name: 'Admin User' },\n];\n\nfunction LeadDialog({ isOpen, onOpenChange, lead, onSuccess }: LeadDialogProps) {\n  const [formData, setFormData] = useState({\n    firstName: lead?.firstName || '',\n    lastName: lead?.lastName || '',\n    email: lead?.email || '',\n    phone: lead?.phone || '',\n    company: lead?.company || '',\n    address: lead?.address || '',\n    city: lead?.city || '',\n    state: lead?.state || '',\n    zipCode: lead?.zipCode || '',\n    estimatedValue: lead?.estimatedValue || '',\n    assignedTo: lead?.assignedTo || 'unassigned',\n    probability: lead?.probability?.toString() || '25',\n    notes: lead?.notes || '',\n    source: lead?.source || 'manual',\n    status: lead?.status || 'new',\n  });\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const mutation = useMutation({\n    mutationFn: (data: InsertLead) => {\n      if (lead) {\n        return leadsApi.update(lead.id, data);\n      } else {\n        return leadsApi.create(data);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/leads'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard-stats'] });\n      onOpenChange(false);\n      onSuccess();\n      toast({\n        title: \"Success\",\n        description: lead ? \"Lead updated successfully\" : \"Lead created successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || `Failed to ${lead ? 'update' : 'create'} lead`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    mutation.mutate({\n      ...formData,\n      probability: parseInt(formData.probability) || 25,\n      estimatedValue: formData.estimatedValue === '' ? null : formData.estimatedValue,\n      assignedTo: formData.assignedTo === 'unassigned' ? null : formData.assignedTo,\n    });\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader className=\"border-b pb-4\">\n          <DialogTitle className=\"text-2xl font-bold text-foreground\">\n            {lead ? 'Edit Lead' : 'Add New Lead'}\n          </DialogTitle>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-6 py-4\">\n          {/* Contact Information Section */}\n          <div className=\"space-y-4\">\n            <div className=\"border-b pb-2\">\n              <h3 className=\"text-lg font-semibold text-foreground flex items-center gap-2\">\n                <div className=\"h-5 w-5 rounded bg-primary/10 flex items-center justify-center\">\n                  <span className=\"text-primary text-sm font-bold\">1</span>\n                </div>\n                Contact Information\n              </h3>\n              <p className=\"text-sm text-muted-foreground mt-1\">Basic contact details for the lead</p>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"firstName\" className=\"text-sm font-medium text-foreground\">First Name *</Label>\n                <Input\n                  id=\"firstName\"\n                  value={formData.firstName}\n                  onChange={(e) => setFormData({ ...formData, firstName: e.target.value })}\n                  required\n                  data-testid=\"input-first-name\"\n                  className=\"border-border/60 focus:border-primary/60\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"lastName\" className=\"text-sm font-medium text-foreground\">Last Name *</Label>\n                <Input\n                  id=\"lastName\"\n                  value={formData.lastName}\n                  onChange={(e) => setFormData({ ...formData, lastName: e.target.value })}\n                  required\n                  data-testid=\"input-last-name\"\n                  className=\"border-border/60 focus:border-primary/60\"\n                />\n              </div>\n            </div>\n          \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\" className=\"text-sm font-medium text-foreground\">Email Address *</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                  required\n                  data-testid=\"input-email\"\n                  className=\"border-border/60 focus:border-primary/60\"\n                  placeholder=\"john@company.com\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\" className=\"text-sm font-medium text-foreground\">Phone Number</Label>\n                <Input\n                  id=\"phone\"\n                  value={formData.phone}\n                  onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                  data-testid=\"input-phone\"\n                  className=\"border-border/60 focus:border-primary/60\"\n                  placeholder=\"(555) 123-4567\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Company Information Section */}\n          <div className=\"space-y-4\">\n            <div className=\"border-b pb-2\">\n              <h3 className=\"text-lg font-semibold text-foreground flex items-center gap-2\">\n                <div className=\"h-5 w-5 rounded bg-primary/10 flex items-center justify-center\">\n                  <span className=\"text-primary text-sm font-bold\">2</span>\n                </div>\n                Company Information\n              </h3>\n              <p className=\"text-sm text-muted-foreground mt-1\">Business details and address</p>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"company\" className=\"text-sm font-medium text-foreground\">Company Name</Label>\n              <Input\n                id=\"company\"\n                value={formData.company}\n                onChange={(e) => setFormData({ ...formData, company: e.target.value })}\n                data-testid=\"input-company\"\n                className=\"border-border/60 focus:border-primary/60\"\n                placeholder=\"Acme Solar Solutions\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"address\" className=\"text-sm font-medium text-foreground\">Street Address</Label>\n              <Input\n                id=\"address\"\n                value={formData.address}\n                onChange={(e) => setFormData({ ...formData, address: e.target.value })}\n                data-testid=\"input-address\"\n                className=\"border-border/60 focus:border-primary/60\"\n                placeholder=\"123 Main Street\"\n              />\n            </div>\n            <div className=\"grid grid-cols-3 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"city\" className=\"text-sm font-medium text-foreground\">City</Label>\n                <Input\n                  id=\"city\"\n                  value={formData.city}\n                  onChange={(e) => setFormData({ ...formData, city: e.target.value })}\n                  data-testid=\"input-city\"\n                  className=\"border-border/60 focus:border-primary/60\"\n                  placeholder=\"Austin\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"state\" className=\"text-sm font-medium text-foreground\">State</Label>\n                <Input\n                  id=\"state\"\n                  value={formData.state}\n                  onChange={(e) => setFormData({ ...formData, state: e.target.value })}\n                  data-testid=\"input-state\"\n                  className=\"border-border/60 focus:border-primary/60\"\n                  placeholder=\"TX\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"zipCode\" className=\"text-sm font-medium text-foreground\">Zip Code</Label>\n                <Input\n                  id=\"zipCode\"\n                  value={formData.zipCode}\n                  onChange={(e) => setFormData({ ...formData, zipCode: e.target.value })}\n                  data-testid=\"input-zip-code\"\n                  className=\"border-border/60 focus:border-primary/60\"\n                  placeholder=\"78701\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Lead Details Section */}\n          <div className=\"space-y-4\">\n            <div className=\"border-b pb-2\">\n              <h3 className=\"text-lg font-semibold text-foreground flex items-center gap-2\">\n                <div className=\"h-5 w-5 rounded bg-primary/10 flex items-center justify-center\">\n                  <span className=\"text-primary text-sm font-bold\">3</span>\n                </div>\n                Lead Details\n              </h3>\n              <p className=\"text-sm text-muted-foreground mt-1\">Sales opportunity information</p>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"estimatedValue\" className=\"text-sm font-medium text-foreground\">Estimated Value ($)</Label>\n                <Input\n                  id=\"estimatedValue\"\n                  type=\"number\"\n                  value={formData.estimatedValue}\n                  onChange={(e) => setFormData({ ...formData, estimatedValue: e.target.value })}\n                  data-testid=\"input-estimated-value\"\n                  className=\"border-border/60 focus:border-primary/60\"\n                  placeholder=\"25000\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"probability\" className=\"text-sm font-medium text-foreground\">Probability (%)</Label>\n                <Input\n                  id=\"probability\"\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"100\"\n                  value={formData.probability}\n                  onChange={(e) => setFormData({ ...formData, probability: e.target.value })}\n                  data-testid=\"input-probability\"\n                  className=\"border-border/60 focus:border-primary/60\"\n                  placeholder=\"25\"\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"assignedTo\" className=\"text-sm font-medium text-foreground\">Assigned To</Label>\n                <Select value={formData.assignedTo} onValueChange={(value) => setFormData(prev => ({ ...prev, assignedTo: value }))}>\n                  <SelectTrigger data-testid=\"select-assigned-to\" className=\"border-border/60 focus:border-primary/60\">\n                    <SelectValue placeholder=\"Select assignee\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"unassigned\">Unassigned</SelectItem>\n                    {SAMPLE_USERS.map((user) => (\n                      <SelectItem key={user.id} value={user.id}>{user.name}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"status\" className=\"text-sm font-medium text-foreground\">Status</Label>\n                <Select value={formData.status} onValueChange={(value) => setFormData(prev => ({ ...prev, status: value as Lead['status'] }))}>\n                  <SelectTrigger data-testid=\"select-status\" className=\"border-border/60 focus:border-primary/60\">\n                    <SelectValue placeholder=\"Select status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"new\">New</SelectItem>\n                    <SelectItem value=\"contacted\">Contacted</SelectItem>\n                    <SelectItem value=\"proposal\">Proposal</SelectItem>\n                    <SelectItem value=\"closed_won\">Closed Won</SelectItem>\n                    <SelectItem value=\"closed_lost\">Closed Lost</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"notes\" className=\"text-sm font-medium text-foreground\">Notes</Label>\n              <Textarea\n                id=\"notes\"\n                value={formData.notes}\n                onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n                data-testid=\"input-notes\"\n                placeholder=\"Add any relevant notes about this lead...\"\n                className=\"border-border/60 focus:border-primary/60 min-h-[100px] resize-none\"\n                rows={4}\n              />\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-between pt-4 border-t\">\n            <div className=\"text-sm text-muted-foreground\">\n              {lead ? 'Last updated: ' + new Date(lead.updatedAt || lead.createdAt).toLocaleDateString() : 'All required fields must be completed'}\n            </div>\n            <div className=\"flex gap-3\">\n              <Button type=\"button\" variant=\"outline\" onClick={() => onOpenChange(false)} className=\"min-w-20\">\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={mutation.isPending} data-testid=\"button-save-lead\" className=\"min-w-32\">\n                {mutation.isPending ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin\"></div>\n                    Saving...\n                  </div>\n                ) : (\n                  lead ? 'Update Lead' : 'Create Lead'\n                )}\n              </Button>\n            </div>\n          </div>\n        </form>\n\n        {lead && (\n          <div className=\"border-t pt-6\">\n            <CommunicationHistory \n              leadId={lead.id} \n              leadName={`${lead.firstName} ${lead.lastName}`}\n            />\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport default function LeadManagement() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState<string>('');\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingLead, setEditingLead] = useState<Lead | undefined>();\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: leads = [], isLoading, error } = useQuery({\n    queryKey: ['/api/leads', { search: searchTerm, status: statusFilter }],\n    queryFn: () => leadsApi.getAll({\n      search: searchTerm || undefined,\n      status: statusFilter === 'all' ? undefined : statusFilter || undefined,\n    }),\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: ({ leadId, status }: { leadId: string; status: Lead['status'] }) => \n      leadsApi.update(leadId, { status }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/leads'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard-stats'] });\n      toast({\n        title: \"Success\",\n        description: \"Lead status updated\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update lead status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: leadsApi.delete,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/leads'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard-stats'] });\n      toast({\n        title: \"Success\",\n        description: \"Lead deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\", \n        description: error.message || \"Failed to delete lead\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (error) {\n    console.error('Failed to fetch leads:', error);\n  }\n\n  const handleStatusUpdate = (leadId: string, newStatus: string) => {\n    updateStatusMutation.mutate({ leadId, status: newStatus });\n  };\n\n  const handleEdit = (lead: Lead) => {\n    setEditingLead(lead);\n    setIsDialogOpen(true);\n  };\n\n  const [deleteLeadId, setDeleteLeadId] = useState<string | null>(null);\n\n  const handleDelete = (leadId: string) => {\n    setDeleteLeadId(leadId);\n  };\n\n  const confirmDelete = () => {\n    if (deleteLeadId) {\n      deleteMutation.mutate(deleteLeadId);\n      setDeleteLeadId(null);\n    }\n  };\n\n  const handleDialogClose = () => {\n    setIsDialogOpen(false);\n    setEditingLead(undefined);\n  };\n\n  // Group leads by status\n  const leadsByStatus = {\n    new: leads.filter(lead => lead.status === 'new'),\n    contacted: leads.filter(lead => lead.status === 'contacted'), \n    proposal: leads.filter(lead => lead.status === 'proposal'),\n    closed_won: leads.filter(lead => lead.status === 'closed_won'),\n  };\n\n  const pipelineStages = [\n    {\n      title: \"New Leads\",\n      status: \"new\",\n      color: \"bg-chart-2\",\n      leads: leadsByStatus.new,\n    },\n    {\n      title: \"Contacted\",\n      status: \"contacted\",\n      color: \"bg-chart-4\", \n      leads: leadsByStatus.contacted,\n    },\n    {\n      title: \"Proposal Sent\",\n      status: \"proposal\",\n      color: \"bg-chart-1\",\n      leads: leadsByStatus.proposal,\n    },\n    {\n      title: \"Closed Won\",\n      status: \"closed_won\",\n      color: \"bg-chart-3\",\n      leads: leadsByStatus.closed_won,\n    }\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-lg font-semibold\">Lead Management</h2>\n          <Button disabled>Add New Lead</Button>\n        </div>\n        <div className=\"flex gap-4 overflow-x-auto pb-4\">\n          {[1, 2, 3, 4].map((i) => (\n            <div key={i} className=\"flex-1 min-w-[280px]\">\n              <Card className=\"h-[400px] animate-pulse\">\n                <CardHeader>\n                  <div className=\"h-4 bg-muted rounded\"></div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <div className=\"h-20 bg-muted rounded\"></div>\n                    <div className=\"h-20 bg-muted rounded\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-lg font-semibold\">Lead Management</h2>\n        <Button onClick={() => setIsDialogOpen(true)} data-testid=\"button-add-lead\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add New Lead\n        </Button>\n      </div>\n\n      <div className=\"flex gap-4\">\n        <div className=\"relative flex-1 max-w-md\">\n          <Input\n            placeholder=\"Search leads...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            data-testid=\"input-search-leads\"\n          />\n        </div>\n        <Select value={statusFilter} onValueChange={setStatusFilter}>\n          <SelectTrigger className=\"w-[180px]\" data-testid=\"select-status-filter\">\n            <SelectValue placeholder=\"Filter by status\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Status</SelectItem>\n            <SelectItem value=\"new\">New</SelectItem>\n            <SelectItem value=\"contacted\">Contacted</SelectItem>\n            <SelectItem value=\"proposal\">Proposal</SelectItem>\n            <SelectItem value=\"closed_won\">Closed Won</SelectItem>\n            <SelectItem value=\"closed_lost\">Closed Lost</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div className=\"flex gap-4 overflow-x-auto pb-4\">\n        {pipelineStages.map((stage) => (\n          <PipelineStage \n            key={stage.title} \n            {...stage} \n            onStatusUpdate={handleStatusUpdate}\n            onEdit={handleEdit}\n            onDelete={handleDelete}\n          />\n        ))}\n      </div>\n\n      <LeadDialog\n        isOpen={isDialogOpen}\n        onOpenChange={handleDialogClose}\n        lead={editingLead}\n        onSuccess={() => {}}\n      />\n\n      <AlertDialog open={deleteLeadId !== null} onOpenChange={() => setDeleteLeadId(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Lead</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete this lead? This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction onClick={confirmDelete} className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\">\n              Delete Lead\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}","size_bytes":30854},"client/src/components/LeadsPipeline.tsx":{"content":"import LeadManagement from \"./LeadManagement\";\n\nexport default function LeadsPipeline() {\n  return <LeadManagement />;\n}","size_bytes":120},"client/src/components/RecentActivity.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Phone, \n  Mail, \n  Calendar, \n  MessageSquare, \n  FileText,\n  Clock\n} from \"lucide-react\";\n\ninterface Activity {\n  id: string;\n  type: 'call' | 'email' | 'meeting' | 'note' | 'proposal';\n  title: string;\n  description: string;\n  leadName: string;\n  leadCompany: string;\n  userAvatar?: string;\n  userName: string;\n  timestamp: string;\n  status?: 'completed' | 'scheduled' | 'pending';\n}\n\nfunction getActivityIcon(type: Activity['type']) {\n  switch (type) {\n    case 'call': return <Phone className=\"h-4 w-4\" />;\n    case 'email': return <Mail className=\"h-4 w-4\" />;\n    case 'meeting': return <Calendar className=\"h-4 w-4\" />;\n    case 'note': return <MessageSquare className=\"h-4 w-4\" />;\n    case 'proposal': return <FileText className=\"h-4 w-4\" />;\n    default: return <Clock className=\"h-4 w-4\" />;\n  }\n}\n\nfunction getActivityColor(type: Activity['type']) {\n  switch (type) {\n    case 'call': return 'bg-chart-1 text-white';\n    case 'email': return 'bg-chart-2 text-black';\n    case 'meeting': return 'bg-chart-3 text-white';\n    case 'note': return 'bg-chart-4 text-white';\n    case 'proposal': return 'bg-chart-5 text-white';\n    default: return 'bg-muted text-muted-foreground';\n  }\n}\n\nfunction getStatusBadge(status?: Activity['status']) {\n  if (!status) return null;\n  \n  const variants = {\n    completed: 'bg-chart-3 text-white',\n    scheduled: 'bg-chart-4 text-white',\n    pending: 'bg-chart-2 text-black',\n  };\n  \n  return (\n    <Badge className={variants[status]} data-testid={`badge-status-${status}`}>\n      {status.charAt(0).toUpperCase() + status.slice(1)}\n    </Badge>\n  );\n}\n\nfunction ActivityItem({ activity }: { activity: Activity }) {\n  return (\n    <div className=\"flex items-start gap-4 p-4 hover-elevate rounded-lg border border-border/40 transition-all duration-200 group\" data-testid={`activity-item-${activity.id}`}>\n      <div className={`flex h-10 w-10 items-center justify-center rounded-lg shadow-sm ${getActivityColor(activity.type)} group-hover:scale-105 transition-transform duration-200`}>\n        {getActivityIcon(activity.type)}\n      </div>\n      \n      <div className=\"flex-1 min-w-0 space-y-2\">\n        <div className=\"flex items-start justify-between gap-3\">\n          <h4 className=\"text-sm font-semibold text-foreground truncate leading-5\" data-testid={`text-activity-title-${activity.id}`}>\n            {activity.title}\n          </h4>\n          {getStatusBadge(activity.status)}\n        </div>\n        \n        <p className=\"text-sm text-muted-foreground line-clamp-2 leading-relaxed\">\n          {activity.description}\n        </p>\n        \n        <div className=\"flex items-center justify-between text-sm gap-2\">\n          <div className=\"flex items-center gap-2 min-w-0\">\n            <span className=\"font-medium text-foreground/90 truncate\">{activity.leadName}</span>\n            <span className=\"text-muted-foreground/80 hidden sm:inline\">•</span>\n            <span className=\"text-muted-foreground/80 truncate hidden sm:inline\">{activity.leadCompany}</span>\n          </div>\n          <span className=\"text-muted-foreground/70 text-xs font-medium whitespace-nowrap\" data-testid={`text-timestamp-${activity.id}`}>\n            {activity.timestamp}\n          </span>\n        </div>\n        \n        <div className=\"flex items-center gap-2 pt-1\">\n          <Avatar className=\"h-6 w-6 border border-border/40\">\n            <AvatarImage src={activity.userAvatar} />\n            <AvatarFallback className=\"text-xs font-medium bg-muted\">\n              {activity.userName.split(' ').map(n => n[0]).join('')}\n            </AvatarFallback>\n          </Avatar>\n          <span className=\"text-xs text-muted-foreground/80 font-medium\">by {activity.userName}</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function RecentActivity() {\n  // TODO: remove mock data - replace with real data from API\n  const activities: Activity[] = [\n    {\n      id: \"1\",\n      type: \"call\",\n      title: \"Follow-up Call Completed\",\n      description: \"Discussed solar panel options and financing. Customer interested in 25kW system.\",\n      leadName: \"Sarah Johnson\",\n      leadCompany: \"GreenTech Industries\",\n      userName: \"Mike Davis\",\n      timestamp: \"2 hours ago\",\n      status: \"completed\",\n    },\n    {\n      id: \"2\",\n      type: \"email\",\n      title: \"Proposal Sent\",\n      description: \"Sent detailed proposal for 40kW commercial solar installation with ROI analysis.\",\n      leadName: \"Robert Wilson\",\n      leadCompany: \"Solar Dynamics\",\n      userName: \"Lisa Chen\",\n      timestamp: \"4 hours ago\",\n      status: \"pending\",\n    },\n    {\n      id: \"3\",\n      type: \"meeting\",\n      title: \"Site Visit Scheduled\",\n      description: \"Scheduled on-site assessment for next Tuesday at 2:00 PM.\",\n      leadName: \"Jennifer Lee\",\n      leadCompany: \"Sustainable Systems\",\n      userName: \"John Smith\",\n      timestamp: \"6 hours ago\",\n      status: \"scheduled\",\n    },\n    {\n      id: \"4\",\n      type: \"note\",\n      title: \"Lead Qualification Updated\",\n      description: \"Updated lead score based on budget confirmation and decision timeline.\",\n      leadName: \"David Brown\",\n      leadCompany: \"Future Solar\",\n      userName: \"Emily Rodriguez\",\n      timestamp: \"1 day ago\",\n      status: \"completed\",\n    },\n    {\n      id: \"5\",\n      type: \"proposal\",\n      title: \"Contract Signed\",\n      description: \"Customer signed 156kW commercial installation contract. Project starts next month.\",\n      leadName: \"Mark Thompson\",\n      leadCompany: \"Energy Efficient Inc\",\n      userName: \"Alex Johnson\",\n      timestamp: \"2 days ago\",\n      status: \"completed\",\n    }\n  ];\n\n  return (\n    <Card className=\"shadow-sm border-border/60\">\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between gap-3\">\n          <CardTitle className=\"text-xl font-bold text-foreground\">Recent Activity</CardTitle>\n          <Button size=\"sm\" variant=\"outline\" data-testid=\"button-view-all-activity\">\n            View All\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent className=\"pt-0\">\n        <div className=\"space-y-3 max-h-[500px] overflow-y-auto pr-2\">\n          {activities.map((activity) => (\n            <ActivityItem key={activity.id} activity={activity} />\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6594},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useEffect, useState } from \"react\";\n\nexport default function ThemeToggle() {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"light\");\n\n  useEffect(() => {\n    // Check localStorage and system preference\n    const savedTheme = localStorage.getItem(\"theme\") as \"light\" | \"dark\" | null;\n    const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\";\n    const initialTheme = savedTheme || systemTheme;\n    \n    setTheme(initialTheme);\n    \n    // Apply theme to document\n    if (initialTheme === \"dark\") {\n      document.documentElement.classList.add(\"dark\");\n    } else {\n      document.documentElement.classList.remove(\"dark\");\n    }\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    localStorage.setItem(\"theme\", newTheme);\n    \n    if (newTheme === \"dark\") {\n      document.documentElement.classList.add(\"dark\");\n    } else {\n      document.documentElement.classList.remove(\"dark\");\n    }\n    \n    console.log(`Theme switched to ${newTheme}`);\n  };\n\n  return (\n    <Button\n      size=\"icon\"\n      variant=\"ghost\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n      className=\"h-8 w-8\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-4 w-4\" />\n      ) : (\n        <Sun className=\"h-4 w-4\" />\n      )}\n    </Button>\n  );\n}","size_bytes":1482},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"import type { Lead, InsertLead, Campaign, InsertCampaign, Communication, InsertCommunication } from \"@shared/schema\";\n\nconst API_BASE = '';\n\n// Helper function for API requests\nasync function apiRequest(endpoint: string, options?: RequestInit) {\n  const url = `${API_BASE}${endpoint}`;\n  const response = await fetch(url, {\n    headers: {\n      'Content-Type': 'application/json',\n      ...options?.headers,\n    },\n    ...options,\n  });\n\n  if (!response.ok) {\n    const error = await response.json().catch(() => ({ error: 'An error occurred' }));\n    throw new Error(error.error || `HTTP ${response.status}`);\n  }\n\n  // Handle 204 No Content responses (like DELETE operations)\n  if (response.status === 204) {\n    return undefined;\n  }\n\n  return response.json();\n}\n\n// Leads API\nexport const leadsApi = {\n  getAll: (filters?: { status?: string; assignedTo?: string; search?: string }): Promise<Lead[]> => {\n    const params = new URLSearchParams();\n    if (filters?.status) params.append('status', filters.status);\n    if (filters?.assignedTo) params.append('assignedTo', filters.assignedTo);\n    if (filters?.search) params.append('search', filters.search);\n    \n    const query = params.toString();\n    return apiRequest(`/api/leads${query ? `?${query}` : ''}`);\n  },\n\n  getById: (id: string): Promise<Lead> => {\n    return apiRequest(`/api/leads/${id}`);\n  },\n\n  create: (lead: InsertLead): Promise<Lead> => {\n    return apiRequest('/api/leads', {\n      method: 'POST',\n      body: JSON.stringify(lead),\n    });\n  },\n\n  update: (id: string, updates: Partial<InsertLead>): Promise<Lead> => {\n    return apiRequest(`/api/leads/${id}`, {\n      method: 'PUT', \n      body: JSON.stringify(updates),\n    });\n  },\n\n  delete: (id: string): Promise<void> => {\n    return apiRequest(`/api/leads/${id}`, {\n      method: 'DELETE',\n    });\n  },\n\n  getByStatus: (): Promise<{ status: string; count: number; totalValue: number }[]> => {\n    return apiRequest('/api/leads-by-status');\n  },\n};\n\n// Campaigns API\nexport const campaignsApi = {\n  getAll: (filters?: { status?: string; createdBy?: string }): Promise<Campaign[]> => {\n    const params = new URLSearchParams();\n    if (filters?.status) params.append('status', filters.status);\n    if (filters?.createdBy) params.append('createdBy', filters.createdBy);\n    \n    const query = params.toString();\n    return apiRequest(`/api/campaigns${query ? `?${query}` : ''}`);\n  },\n\n  getById: (id: string): Promise<Campaign> => {\n    return apiRequest(`/api/campaigns/${id}`);\n  },\n\n  create: (campaign: InsertCampaign): Promise<Campaign> => {\n    return apiRequest('/api/campaigns', {\n      method: 'POST',\n      body: JSON.stringify(campaign),\n    });\n  },\n\n  update: (id: string, updates: Partial<InsertCampaign>): Promise<Campaign> => {\n    return apiRequest(`/api/campaigns/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(updates),\n    });\n  },\n\n  delete: (id: string): Promise<void> => {\n    return apiRequest(`/api/campaigns/${id}`, {\n      method: 'DELETE',\n    });\n  },\n};\n\n// Communications API\nexport const communicationsApi = {\n  getAll: (leadId?: string): Promise<Communication[]> => {\n    const params = new URLSearchParams();\n    if (leadId) params.append('leadId', leadId);\n    \n    const query = params.toString();\n    return apiRequest(`/api/communications${query ? `?${query}` : ''}`);\n  },\n\n  create: (communication: InsertCommunication): Promise<Communication> => {\n    return apiRequest('/api/communications', {\n      method: 'POST',\n      body: JSON.stringify(communication),\n    });\n  },\n\n  update: (id: string, updates: Partial<InsertCommunication>): Promise<Communication> => {\n    return apiRequest(`/api/communications/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(updates),\n    });\n  },\n\n  delete: (id: string): Promise<void> => {\n    return apiRequest(`/api/communications/${id}`, {\n      method: 'DELETE',\n    });\n  },\n};\n\n// Dashboard API\nexport const dashboardApi = {\n  getStats: (): Promise<{\n    totalLeads: number;\n    pipelineValue: string;\n    conversionRate: string;\n    closedDeals: number;\n    leadsByStatus: { status: string; count: number; totalValue: number }[];\n    activeCampaigns: number;\n    totalCommunications: number;\n  }> => {\n    return apiRequest('/api/dashboard-stats');\n  },\n};","size_bytes":4288},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Campaigns.tsx":{"content":"import CampaignCard from \"@/components/CampaignCard\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Search, Filter, Plus, BarChart } from \"lucide-react\";\n\nexport default function Campaigns() {\n  // TODO: remove mock data - replace with real data from API\n  const campaigns = [\n    {\n      id: \"1\",\n      name: \"Spring Solar Promotion 2024\",\n      subject: \"Save 25% on Premium Solar Installation This Spring\",\n      status: 'active' as const,\n      scheduledAt: \"Mar 15, 2024 at 9:00 AM\",\n      sentAt: \"Mar 15, 2024 at 9:00 AM\",\n      recipients: 2847,\n      delivered: 2791,\n      opened: 1156,\n      clicked: 347,\n      openRate: 41.4,\n      clickRate: 12.4,\n    },\n    {\n      id: \"2\",\n      name: \"Commercial Solar Solutions\",\n      subject: \"Transform Your Business with Solar Energy\",\n      status: 'scheduled' as const,\n      scheduledAt: \"Mar 20, 2024 at 10:00 AM\",\n      recipients: 1456,\n      delivered: 0,\n      opened: 0,\n      clicked: 0,\n      openRate: 0,\n      clickRate: 0,\n    },\n    {\n      id: \"3\",\n      name: \"Residential Solar Upgrade\",\n      subject: \"Upgrade to Smart Solar Technology\",\n      status: 'completed' as const,\n      sentAt: \"Mar 1, 2024 at 9:00 AM\",\n      recipients: 3254,\n      delivered: 3189,\n      opened: 1847,\n      clicked: 623,\n      openRate: 57.9,\n      clickRate: 19.5,\n    },\n    {\n      id: \"4\",\n      name: \"Summer Solar Campaign\",\n      subject: \"Beat the Heat with Solar Power\",\n      status: 'draft' as const,\n      recipients: 0,\n      delivered: 0,\n      opened: 0,\n      clicked: 0,\n      openRate: 0,\n      clickRate: 0,\n    },\n    {\n      id: \"5\",\n      name: \"Q4 Solar Incentives\",\n      subject: \"Last Chance for Federal Tax Credits\",\n      status: 'paused' as const,\n      sentAt: \"Dec 1, 2023 at 10:00 AM\",\n      recipients: 1987,\n      delivered: 1923,\n      opened: 865,\n      clicked: 234,\n      openRate: 45.0,\n      clickRate: 12.1,\n    }\n  ];\n\n  const activeCampaigns = campaigns.filter(c => c.status === 'active');\n  const scheduledCampaigns = campaigns.filter(c => c.status === 'scheduled');\n  const completedCampaigns = campaigns.filter(c => c.status === 'completed');\n  const draftCampaigns = campaigns.filter(c => c.status === 'draft');\n\n  const handleCampaignEdit = (id: string) => {\n    console.log(`Edit campaign ${id}`);\n  };\n\n  const handleCampaignToggle = (id: string) => {\n    console.log(`Toggle campaign ${id}`);\n  };\n\n  const handleCampaignView = (id: string) => {\n    console.log(`View campaign ${id}`);\n  };\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\" data-testid=\"text-campaigns-title\">\n            Marketing Campaigns\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Create, manage, and track your email marketing campaigns\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            data-testid=\"button-view-analytics\"\n          >\n            <BarChart className=\"h-4 w-4 mr-2\" />\n            Analytics\n          </Button>\n          <Button \n            size=\"sm\"\n            data-testid=\"button-create-campaign\"\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Create Campaign\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"flex items-center gap-4\">\n        <div className=\"relative flex-1 max-w-md\">\n          <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search campaigns...\"\n            className=\"pl-9\"\n            data-testid=\"input-search-campaigns\"\n          />\n        </div>\n        <Button \n          variant=\"outline\" \n          size=\"sm\"\n          data-testid=\"button-filter-campaigns\"\n        >\n          <Filter className=\"h-4 w-4 mr-2\" />\n          Filters\n        </Button>\n      </div>\n\n      <Tabs defaultValue=\"all\" data-testid=\"tabs-campaigns\">\n        <TabsList>\n          <TabsTrigger value=\"all\" data-testid=\"tab-all-campaigns\">\n            All ({campaigns.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"active\" data-testid=\"tab-active-campaigns\">\n            Active ({activeCampaigns.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"scheduled\" data-testid=\"tab-scheduled-campaigns\">\n            Scheduled ({scheduledCampaigns.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"completed\" data-testid=\"tab-completed-campaigns\">\n            Completed ({completedCampaigns.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"draft\" data-testid=\"tab-draft-campaigns\">\n            Drafts ({draftCampaigns.length})\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"all\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {campaigns.map((campaign) => (\n              <CampaignCard\n                key={campaign.id}\n                campaign={campaign}\n                onEdit={handleCampaignEdit}\n                onToggleStatus={handleCampaignToggle}\n                onViewDetails={handleCampaignView}\n              />\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"active\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {activeCampaigns.map((campaign) => (\n              <CampaignCard\n                key={campaign.id}\n                campaign={campaign}\n                onEdit={handleCampaignEdit}\n                onToggleStatus={handleCampaignToggle}\n                onViewDetails={handleCampaignView}\n              />\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"scheduled\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {scheduledCampaigns.map((campaign) => (\n              <CampaignCard\n                key={campaign.id}\n                campaign={campaign}\n                onEdit={handleCampaignEdit}\n                onToggleStatus={handleCampaignToggle}\n                onViewDetails={handleCampaignView}\n              />\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"completed\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {completedCampaigns.map((campaign) => (\n              <CampaignCard\n                key={campaign.id}\n                campaign={campaign}\n                onEdit={handleCampaignEdit}\n                onToggleStatus={handleCampaignToggle}\n                onViewDetails={handleCampaignView}\n              />\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"draft\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {draftCampaigns.map((campaign) => (\n              <CampaignCard\n                key={campaign.id}\n                campaign={campaign}\n                onEdit={handleCampaignEdit}\n                onToggleStatus={handleCampaignToggle}\n                onViewDetails={handleCampaignView}\n              />\n            ))}\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":7478},"client/src/pages/Communications.tsx":{"content":"import CommunicationsManagement from \"@/components/CommunicationsManagement\";\n\nexport default function Communications() {\n  return <CommunicationsManagement />;\n}","size_bytes":162},"client/src/pages/Dashboard.tsx":{"content":"import DashboardStats from \"@/components/DashboardStats\";\nimport LeadsPipeline from \"@/components/LeadsPipeline\";\nimport RecentActivity from \"@/components/RecentActivity\";\nimport CampaignCard from \"@/components/CampaignCard\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Dashboard() {\n  // TODO: remove mock data - replace with real data from API\n  const featuredCampaigns = [\n    {\n      id: \"1\",\n      name: \"Spring Solar Promotion\",\n      subject: \"Save 25% on Premium Solar Installation\",\n      content: \"Discover our premium solar panel solutions with 25% savings for a limited time. Professional installation included.\",\n      status: 'active' as const,\n      scheduledAt: new Date(\"2024-03-15T09:00:00\"),\n      sentAt: new Date(\"2024-03-15T09:00:00\"),\n      openRate: \"41.40\",\n      clickRate: \"12.40\",\n      createdBy: \"user-1\",\n      createdAt: new Date(\"2024-03-10T10:00:00\"),\n    },\n    {\n      id: \"2\", \n      name: \"Commercial Solar Solutions\",\n      subject: \"Transform Your Business with Solar Energy\",\n      content: \"Professional commercial solar installations to reduce your energy costs and environmental impact.\",\n      status: 'scheduled' as const,\n      scheduledAt: new Date(\"2024-03-20T10:00:00\"),\n      sentAt: null,\n      openRate: \"0.00\",\n      clickRate: \"0.00\",\n      createdBy: \"user-1\",\n      createdAt: new Date(\"2024-03-12T14:00:00\"),\n    }\n  ];\n\n  const handleCampaignEdit = (id: string) => {\n    console.log(`Edit campaign ${id}`);\n  };\n\n  const handleCampaignToggle = (id: string) => {\n    console.log(`Toggle campaign ${id}`);\n  };\n\n  const handleCampaignView = (id: string) => {\n    console.log(`View campaign ${id}`);\n  };\n\n  return (\n    <div className=\"space-y-8 p-8\">\n      <div className=\"space-y-2\">\n        <h1 className=\"text-3xl font-bold text-foreground tracking-tight\" data-testid=\"text-dashboard-title\">\n          Dashboard\n        </h1>\n        <p className=\"text-muted-foreground text-lg\">\n          Overview of your solar sales pipeline and campaign performance\n        </p>\n      </div>\n\n      <DashboardStats />\n\n      <div className=\"grid gap-2 lg:grid-cols-3\">\n        <div className=\"lg:col-span-2\">\n          <LeadsPipeline />\n        </div>\n        <div className=\"space-y-6\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-xl font-bold text-foreground\">Active Campaigns</h3>\n              <Button size=\"sm\" variant=\"outline\" data-testid=\"button-view-all-campaigns\">\n                View All\n              </Button>\n            </div>\n            <div className=\"space-y-4\">\n              {featuredCampaigns.map((campaign) => (\n                <CampaignCard\n                  key={campaign.id}\n                  campaign={campaign}\n                  onEdit={handleCampaignEdit}\n                  onToggleStatus={handleCampaignToggle}\n                  onViewDetails={handleCampaignView}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <RecentActivity />\n    </div>\n  );\n}","size_bytes":3109},"client/src/pages/Pipeline.tsx":{"content":"import LeadsPipeline from \"@/components/LeadsPipeline\";\nimport DashboardStats from \"@/components/DashboardStats\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, Filter, Plus, Download } from \"lucide-react\";\n\nexport default function Pipeline() {\n  return (\n    <div className=\"space-y-8 p-8\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"space-y-2\">\n          <h1 className=\"text-3xl font-bold text-foreground tracking-tight\" data-testid=\"text-pipeline-title\">\n            Sales Pipeline\n          </h1>\n          <p className=\"text-muted-foreground text-lg\">\n            Manage your leads through each stage of the sales process\n          </p>\n        </div>\n        <div className=\"flex items-center gap-3\">\n          <Button \n            variant=\"outline\" \n            size=\"default\"\n            data-testid=\"button-export-pipeline\"\n            className=\"hover-elevate\"\n          >\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export Pipeline\n          </Button>\n          <Button \n            size=\"default\"\n            data-testid=\"button-add-lead\"\n            className=\"hover-elevate\"\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add New Lead\n          </Button>\n        </div>\n      </div>\n\n      <DashboardStats />\n\n      <div className=\"bg-card border border-border/60 rounded-lg p-6 shadow-sm space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-semibold text-foreground\">Pipeline Controls</h3>\n          <p className=\"text-sm text-muted-foreground\">Search and filter your leads</p>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <div className=\"relative flex-1 max-w-lg\">\n            <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search leads by name, company, email...\"\n              className=\"pl-9 border-border/60 focus:border-primary/60\"\n              data-testid=\"input-search-leads\"\n            />\n          </div>\n          <Button \n            variant=\"outline\" \n            size=\"default\"\n            data-testid=\"button-filter-leads\"\n            className=\"hover-elevate min-w-28\"\n          >\n            <Filter className=\"h-4 w-4 mr-2\" />\n            Advanced Filters\n          </Button>\n        </div>\n      </div>\n\n      <LeadsPipeline />\n    </div>\n  );\n}","size_bytes":2507},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/AppSidebar.tsx":{"content":"import { AppSidebar } from '../AppSidebar';\nimport { SidebarProvider } from '@/components/ui/sidebar';\n\nexport default function AppSidebarExample() {\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar />\n      </div>\n    </SidebarProvider>\n  );\n}","size_bytes":422},"client/src/components/examples/CampaignCard.tsx":{"content":"import CampaignCard from '../CampaignCard';\n\nexport default function CampaignCardExample() {\n  // TODO: remove mock data - replace with real data from API\n  const mockCampaign = {\n    id: \"1\",\n    name: \"Solar Panel Spring Promotion 2024\",\n    subject: \"Save 25% on Premium Solar Installation This Spring\",\n    status: 'active' as const,\n    scheduledAt: \"Mar 15, 2024 at 9:00 AM\",\n    sentAt: \"Mar 15, 2024 at 9:00 AM\",\n    recipients: 2847,\n    delivered: 2791,\n    opened: 1156,\n    clicked: 347,\n    openRate: 41.4,\n    clickRate: 12.4,\n  };\n\n  const handleEdit = (id: string) => {\n    console.log(`Edit campaign ${id}`);\n  };\n\n  const handleToggleStatus = (id: string) => {\n    console.log(`Toggle status for campaign ${id}`);\n  };\n\n  const handleViewDetails = (id: string) => {\n    console.log(`View details for campaign ${id}`);\n  };\n\n  return (\n    <div className=\"max-w-md\">\n      <CampaignCard \n        campaign={mockCampaign} \n        onEdit={handleEdit}\n        onToggleStatus={handleToggleStatus}\n        onViewDetails={handleViewDetails}\n      />\n    </div>\n  );\n}","size_bytes":1078},"client/src/components/examples/DashboardStats.tsx":{"content":"import DashboardStats from '../DashboardStats';\n\nexport default function DashboardStatsExample() {\n  return <DashboardStats />;\n}","size_bytes":129},"client/src/components/examples/LeadsPipeline.tsx":{"content":"import LeadsPipeline from '../LeadsPipeline';\n\nexport default function LeadsPipelineExample() {\n  return <LeadsPipeline />;\n}","size_bytes":125},"client/src/components/examples/RecentActivity.tsx":{"content":"import RecentActivity from '../RecentActivity';\n\nexport default function RecentActivityExample() {\n  return <RecentActivity />;\n}","size_bytes":129},"client/src/components/examples/ThemeToggle.tsx":{"content":"import ThemeToggle from '../ThemeToggle';\n\nexport default function ThemeToggleExample() {\n  return (\n    <div className=\"p-4\">\n      <ThemeToggle />\n    </div>\n  );\n}","size_bytes":166},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}